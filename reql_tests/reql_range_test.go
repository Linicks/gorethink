// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestRangeSuite(t *testing.T) {
    suite.Run(t, new(RangeSuite ))
}

type RangeSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *RangeSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *RangeSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *RangeSuite) TestCases() {


    {
        // range.yaml line #3
        /* 'STREAM' */
        var expected_ string = "STREAM"
        /* r.range().type_of() */

    	suite.T().Log("About to run line #3: r.Range().TypeOf()")

        cursor, err := r.Range().TypeOf().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #3")
    }

    {
        // range.yaml line #6
        /* [0, 1, 2, 3] */
        var expected_ []interface{} = []interface{}{0, 1, 2, 3}
        /* r.range().limit(4) */

    	suite.T().Log("About to run line #6: r.Range().Limit(4)")

        cursor, err := r.Range().Limit(4).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #6")
    }

    {
        // range.yaml line #9
        /* [0, 1, 2, 3] */
        var expected_ []interface{} = []interface{}{0, 1, 2, 3}
        /* r.range(4) */

    	suite.T().Log("About to run line #9: r.Range(4)")

        cursor, err := r.Range(4).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #9")
    }

    {
        // range.yaml line #12
        /* [2, 3, 4] */
        var expected_ []interface{} = []interface{}{2, 3, 4}
        /* r.range(2, 5) */

    	suite.T().Log("About to run line #12: r.Range(2, 5)")

        cursor, err := r.Range(2, 5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #12")
    }

    {
        // range.yaml line #15
        /* [] */
        var expected_ []interface{} = []interface{}{}
        /* r.range(0) */

    	suite.T().Log("About to run line #15: r.Range(0)")

        cursor, err := r.Range(0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #15")
    }

    {
        // range.yaml line #18
        /* [] */
        var expected_ []interface{} = []interface{}{}
        /* r.range(5, 2) */

    	suite.T().Log("About to run line #18: r.Range(5, 2)")

        cursor, err := r.Range(5, 2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #18")
    }

    {
        // range.yaml line #21
        /* [-5, -4, -3] */
        var expected_ []interface{} = []interface{}{-5, -4, -3}
        /* r.range(-5, -2) */

    	suite.T().Log("About to run line #21: r.Range(-5, -2)")

        cursor, err := r.Range(-5, -2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #21")
    }

    {
        // range.yaml line #24
        /* [-5, -4, -3, -2, -1, 0, 1] */
        var expected_ []interface{} = []interface{}{-5, -4, -3, -2, -1, 0, 1}
        /* r.range(-5, 2) */

    	suite.T().Log("About to run line #24: r.Range(-5, 2)")

        cursor, err := r.Range(-5, 2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #24")
    }

    {
        // range.yaml line #27
        /* err("ReqlCompileError", "Expected between 0 and 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected between 0 and 2 arguments but found 3.")
        /* r.range(2, 5, 8) */

    	suite.T().Log("About to run line #27: r.Range(2, 5, 8)")

        cursor, err := r.Range(2, 5, 8).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #27")
    }

    {
        // range.yaml line #30
        /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.")
        /* r.range("foo") */

    	suite.T().Log("About to run line #30: r.Range('foo')")

        cursor, err := r.Range("foo").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #30")
    }

    {
        // range.yaml line #34
        /* err_regex("ReqlQueryLogicError", "Number not an integer \\(>2\\^53\\). 9007199254740994", []) */
        var expected_ ErrRegex = err_regex("ReqlQueryLogicError", "Number not an integer \\(>2\\^53\\). 9007199254740994")
        /* r.range(9007199254740994) */

    	suite.T().Log("About to run line #34: r.Range(9007199254740994)")

        cursor, err := r.Range(9007199254740994).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #34")
    }

    {
        // range.yaml line #37
        /* err_regex("ReqlQueryLogicError", "Number not an integer \\(<-2\\^53\\). -9007199254740994", []) */
        var expected_ ErrRegex = err_regex("ReqlQueryLogicError", "Number not an integer \\(<-2\\^53\\). -9007199254740994")
        /* r.range(-9007199254740994) */

    	suite.T().Log("About to run line #37: r.Range(-9007199254740994)")

        cursor, err := r.Range(-9007199254740994).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #37")
    }

    {
        // range.yaml line #40
        /* err_regex("ReqlQueryLogicError", "Number not an integer. 0\\.5", []) */
        var expected_ ErrRegex = err_regex("ReqlQueryLogicError", "Number not an integer. 0\\.5")
        /* r.range(0.5) */

    	suite.T().Log("About to run line #40: r.Range(0.5)")

        cursor, err := r.Range(0.5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #40")
    }

    {
        // range.yaml line #43
        /* err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.")
        /* r.range().count() */

    	suite.T().Log("About to run line #43: r.Range().Count()")

        cursor, err := r.Range().Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #43")
    }

    {
        // range.yaml line #46
        /* err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.")
        /* r.range().coerce_to("ARRAY") */

    	suite.T().Log("About to run line #46: r.Range().CoerceTo('ARRAY')")

        cursor, err := r.Range().CoerceTo("ARRAY").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #46")
    }

    {
        // range.yaml line #49
        /* err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.")
        /* r.range().coerce_to("OBJECT") */

    	suite.T().Log("About to run line #49: r.Range().CoerceTo('OBJECT')")

        cursor, err := r.Range().CoerceTo("OBJECT").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #49")
    }

    {
        // range.yaml line #52
        /* 4 */
        var expected_ int = 4
        /* r.range(4).count() */

    	suite.T().Log("About to run line #52: r.Range(4).Count()")

        cursor, err := r.Range(4).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #52")
    }
}
