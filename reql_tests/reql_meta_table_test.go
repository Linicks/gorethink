// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go.tpl
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// Tests meta queries for creating and deleting tables
func TestMetaTableSuite(t *testing.T) {
	suite.Run(t, new(MetaTableSuite))
}

type MetaTableSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *MetaTableSuite) SetupTest() {
	suite.T().Log("Setting up MetaTableSuite")
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

	r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *MetaTableSuite) TearDownSuite() {
	suite.T().Log("Tearing down MetaTableSuite")

	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
	r.DBDrop("test").Exec(suite.session)

	suite.session.Close()
}

func (suite *MetaTableSuite) TestCases() {
	suite.T().Log("Running MetaTableSuite: Tests meta queries for creating and deleting tables")

	// meta/table.yaml line #4
	// db = r.db('test')
	suite.T().Log("Possibly executing: var db r.Term = r.DB('test')")

	var db r.Term = r.DB("test")
	_ = db // Prevent any noused variable errors

	{
		// meta/table.yaml line #98
		/* partial({'reconfigured':1}) */
		var expected_ Expected = partial(map[interface{}]interface{}{"reconfigured": 1})
		/* db.table('a').reconfigure(shards=1, replicas={"default":1}, nonvoting_replica_tags=['default'], primary_replica_tag='default') */

		suite.T().Log("About to run line #98: db.Table('a').Reconfigure(r.ReconfigureOpts{Shards: 1, Replicas: map[interface{}]interface{}{'default': 1, }, NonVotingReplicaTags: []interface{}{'default'}, PrimaryReplicaTag: 'default', })")

		runAndAssert(suite.Suite, expected_, db.Table("a").Reconfigure(r.ReconfigureOpts{
			Shards:               1,
			Replicas:             map[interface{}]interface{}{"default": 1},
			NonVotingReplicaTags: []interface{}{"default"},
			PrimaryReplicaTag:    "default",
		}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
		})
		suite.T().Log("Finished running line #98")
	}
}
