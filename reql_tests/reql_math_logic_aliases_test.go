// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestMathLogicAliasesSuite(t *testing.T) {
    suite.Run(t, new(MathLogicAliasesSuite ))
}

type MathLogicAliasesSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *MathLogicAliasesSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *MathLogicAliasesSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *MathLogicAliasesSuite) TestCases() {


    {
        // math_logic/aliases.yaml line #5
        /* 1 */
        var expected_ int = 1
        /* r.expr(0).add(1) */

    	suite.T().Log("About to run line #5: r.Expr(0).Add(1)")

        cursor, err := r.Expr(0).Add(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #5")
    }

    {
        // math_logic/aliases.yaml line #6
        /* 1 */
        var expected_ int = 1
        /* r.add(0, 1) */

    	suite.T().Log("About to run line #6: r.Add(0, 1)")

        cursor, err := r.Add(0, 1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #6")
    }

    {
        // math_logic/aliases.yaml line #7
        /* 1 */
        var expected_ int = 1
        /* r.expr(2).sub(1) */

    	suite.T().Log("About to run line #7: r.Expr(2).Sub(1)")

        cursor, err := r.Expr(2).Sub(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #7")
    }

    {
        // math_logic/aliases.yaml line #8
        /* 1 */
        var expected_ int = 1
        /* r.sub(2, 1) */

    	suite.T().Log("About to run line #8: r.Sub(2, 1)")

        cursor, err := r.Sub(2, 1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #8")
    }

    {
        // math_logic/aliases.yaml line #9
        /* 1 */
        var expected_ int = 1
        /* r.expr(2).div(2) */

    	suite.T().Log("About to run line #9: r.Expr(2).Div(2)")

        cursor, err := r.Expr(2).Div(2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #9")
    }

    {
        // math_logic/aliases.yaml line #10
        /* 1 */
        var expected_ int = 1
        /* r.div(2, 2) */

    	suite.T().Log("About to run line #10: r.Div(2, 2)")

        cursor, err := r.Div(2, 2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #10")
    }

    {
        // math_logic/aliases.yaml line #11
        /* 1 */
        var expected_ int = 1
        /* r.expr(1).mul(1) */

    	suite.T().Log("About to run line #11: r.Expr(1).Mul(1)")

        cursor, err := r.Expr(1).Mul(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #11")
    }

    {
        // math_logic/aliases.yaml line #12
        /* 1 */
        var expected_ int = 1
        /* r.mul(1, 1) */

    	suite.T().Log("About to run line #12: r.Mul(1, 1)")

        cursor, err := r.Mul(1, 1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #12")
    }

    {
        // math_logic/aliases.yaml line #13
        /* 1 */
        var expected_ int = 1
        /* r.expr(1).mod(2) */

    	suite.T().Log("About to run line #13: r.Expr(1).Mod(2)")

        cursor, err := r.Expr(1).Mod(2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #13")
    }

    {
        // math_logic/aliases.yaml line #14
        /* 1 */
        var expected_ int = 1
        /* r.mod(1, 2) */

    	suite.T().Log("About to run line #14: r.Mod(1, 2)")

        cursor, err := r.Mod(1, 2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #14")
    }

    {
        // math_logic/aliases.yaml line #25
        /* True */
        var expected_ bool = true
        /* r.expr(True).and_(True) */

    	suite.T().Log("About to run line #25: r.Expr(true).And(true)")

        cursor, err := r.Expr(true).And(true).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #25")
    }

    {
        // math_logic/aliases.yaml line #26
        /* True */
        var expected_ bool = true
        /* r.expr(True).or_(True) */

    	suite.T().Log("About to run line #26: r.Expr(true).Or(true)")

        cursor, err := r.Expr(true).Or(true).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #26")
    }

    {
        // math_logic/aliases.yaml line #27
        /* True */
        var expected_ bool = true
        /* r.and_(True, True) */

    	suite.T().Log("About to run line #27: r.And(true, true)")

        cursor, err := r.And(true, true).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #27")
    }

    {
        // math_logic/aliases.yaml line #28
        /* True */
        var expected_ bool = true
        /* r.or_(True, True) */

    	suite.T().Log("About to run line #28: r.Or(true, true)")

        cursor, err := r.Or(true, true).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #28")
    }

    {
        // math_logic/aliases.yaml line #29
        /* True */
        var expected_ bool = true
        /* r.expr(False).not_() */

    	suite.T().Log("About to run line #29: r.Expr(false).Not()")

        cursor, err := r.Expr(false).Not().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #29")
    }

    {
        // math_logic/aliases.yaml line #30
        /* True */
        var expected_ bool = true
        /* r.not_(False) */

    	suite.T().Log("About to run line #30: r.Not(false)")

        cursor, err := r.Not(false).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #30")
    }

    {
        // math_logic/aliases.yaml line #34
        /* True */
        var expected_ bool = true
        /* r.expr(1).eq(1) */

    	suite.T().Log("About to run line #34: r.Expr(1).Eq(1)")

        cursor, err := r.Expr(1).Eq(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #34")
    }

    {
        // math_logic/aliases.yaml line #35
        /* True */
        var expected_ bool = true
        /* r.expr(1).ne(2) */

    	suite.T().Log("About to run line #35: r.Expr(1).Ne(2)")

        cursor, err := r.Expr(1).Ne(2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #35")
    }

    {
        // math_logic/aliases.yaml line #36
        /* True */
        var expected_ bool = true
        /* r.expr(1).lt(2) */

    	suite.T().Log("About to run line #36: r.Expr(1).Lt(2)")

        cursor, err := r.Expr(1).Lt(2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #36")
    }

    {
        // math_logic/aliases.yaml line #37
        /* True */
        var expected_ bool = true
        /* r.expr(1).gt(0) */

    	suite.T().Log("About to run line #37: r.Expr(1).Gt(0)")

        cursor, err := r.Expr(1).Gt(0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #37")
    }

    {
        // math_logic/aliases.yaml line #38
        /* True */
        var expected_ bool = true
        /* r.expr(1).le(1) */

    	suite.T().Log("About to run line #38: r.Expr(1).Le(1)")

        cursor, err := r.Expr(1).Le(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #38")
    }

    {
        // math_logic/aliases.yaml line #39
        /* True */
        var expected_ bool = true
        /* r.expr(1).ge(1) */

    	suite.T().Log("About to run line #39: r.Expr(1).Ge(1)")

        cursor, err := r.Expr(1).Ge(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #39")
    }

    {
        // math_logic/aliases.yaml line #40
        /* True */
        var expected_ bool = true
        /* r.eq(1, 1) */

    	suite.T().Log("About to run line #40: r.Eq(1, 1)")

        cursor, err := r.Eq(1, 1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #40")
    }

    {
        // math_logic/aliases.yaml line #41
        /* True */
        var expected_ bool = true
        /* r.ne(1, 2) */

    	suite.T().Log("About to run line #41: r.Ne(1, 2)")

        cursor, err := r.Ne(1, 2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #41")
    }

    {
        // math_logic/aliases.yaml line #42
        /* True */
        var expected_ bool = true
        /* r.lt(1, 2) */

    	suite.T().Log("About to run line #42: r.Lt(1, 2)")

        cursor, err := r.Lt(1, 2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #42")
    }

    {
        // math_logic/aliases.yaml line #43
        /* True */
        var expected_ bool = true
        /* r.gt(1, 0) */

    	suite.T().Log("About to run line #43: r.Gt(1, 0)")

        cursor, err := r.Gt(1, 0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #43")
    }

    {
        // math_logic/aliases.yaml line #44
        /* True */
        var expected_ bool = true
        /* r.le(1, 1) */

    	suite.T().Log("About to run line #44: r.Le(1, 1)")

        cursor, err := r.Le(1, 1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #44")
    }

    {
        // math_logic/aliases.yaml line #45
        /* True */
        var expected_ bool = true
        /* r.ge(1, 1) */

    	suite.T().Log("About to run line #45: r.Ge(1, 1)")

        cursor, err := r.Ge(1, 1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #45")
    }
}
