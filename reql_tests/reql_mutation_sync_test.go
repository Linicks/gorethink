// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestMutationSyncSuite(t *testing.T) {
    suite.Run(t, new(MutationSyncSuite ))
}

type MutationSyncSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *MutationSyncSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *MutationSyncSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *MutationSyncSuite) TestCases() {


    {
        // mutation/sync.yaml line #5
        /* partial({'tables_created':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"tables_created": 1, })
        /* r.db('test').table_create('test1') */

    	suite.T().Log("About to run line #5: r.DB('test').TableCreate('test1')")

        cursor, err := r.DB("test").TableCreate("test1").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #5")
    }

    {
        // mutation/sync.yaml line #7
        /* partial({'tables_created':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"tables_created": 1, })
        /* r.db('test').table_create('test1soft') */

    	suite.T().Log("About to run line #7: r.DB('test').TableCreate('test1soft')")

        cursor, err := r.DB("test").TableCreate("test1soft").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #7")
    }

    {
        // mutation/sync.yaml line #9
        /* {'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':1, 'inserted':0} */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"skipped": 0, "deleted": 0, "unchanged": 0, "errors": 0, "replaced": 1, "inserted": 0, }
        /* r.db('test').table('test1soft').config().update({'durability':'soft'}) */

    	suite.T().Log("About to run line #9: r.DB('test').Table('test1soft').Config().Update(map[interface{}]interface{}{'durability': 'soft', })")

        cursor, err := r.DB("test").Table("test1soft").Config().Update(map[interface{}]interface{}{"durability": "soft", }).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #9")
    }

    // mutation/sync.yaml line #11
    // tbl = r.db('test').table('test1')
    suite.T().Log("Possibly executing: var tbl r.Term = r.DB('test').Table('test1')")

    var tbl r.Term = r.DB("test").Table("test1")
	

    // mutation/sync.yaml line #12
    // tbl_soft = r.db('test').table('test1soft')
    suite.T().Log("Possibly executing: var tbl_soft r.Term = r.DB('test').Table('test1soft')")

    var tbl_soft r.Term = r.DB("test").Table("test1soft")
	

    {
        // mutation/sync.yaml line #13
        /* partial({'created':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"created": 1, })
        /* tbl.index_create('x') */

    	suite.T().Log("About to run line #13: tbl.IndexCreate('x')")

        cursor, err := tbl.IndexCreate("x").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #13")
    }

    {
        // mutation/sync.yaml line #15
        /* [{'ready':True, 'index':'x'}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"ready": true, "index": "x", }}
        /* tbl.index_wait('x').pluck('index', 'ready') */

    	suite.T().Log("About to run line #15: tbl.IndexWait('x').Pluck('index', 'ready')")

        cursor, err := tbl.IndexWait("x").Pluck("index", "ready").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #15")
    }

    {
        // mutation/sync.yaml line #19
        /* {'synced':1} */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"synced": 1, }
        /* tbl.sync() */

    	suite.T().Log("About to run line #19: tbl.Sync()")

        cursor, err := tbl.Sync().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #19")
    }

    {
        // mutation/sync.yaml line #21
        /* {'synced':1} */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"synced": 1, }
        /* tbl_soft.sync() */

    	suite.T().Log("About to run line #21: tbl_soft.Sync()")

        cursor, err := tbl_soft.Sync().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #21")
    }

    {
        // mutation/sync.yaml line #23
        /* {'synced':1} */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"synced": 1, }
        /* tbl.sync() */

    	suite.T().Log("About to run line #23: tbl.Sync()")

        cursor, err := tbl.Sync().Run(suite.session, r.RunOpts{
			Durability: "soft",
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #23")
    }

    {
        // mutation/sync.yaml line #27
        /* {'synced':1} */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"synced": 1, }
        /* tbl.sync() */

    	suite.T().Log("About to run line #27: tbl.Sync()")

        cursor, err := tbl.Sync().Run(suite.session, r.RunOpts{
			Durability: "hard",
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #27")
    }

    {
        // mutation/sync.yaml line #33
        /* err('AttributeError', "'Between' object has no attribute 'sync'") */
        var expected_ Err = err("AttributeError", "'Between' object has no attribute 'sync'")
        /* tbl.between(1, 2).sync() */

    	suite.T().Log("About to run line #33: tbl.Between(1, 2).Sync()")

        actual := tbl.Between(1, 2).Sync()

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #33")
    }

    {
        // mutation/sync.yaml line #39
        /* err('AttributeError', "'Datum' object has no attribute 'sync'") */
        var expected_ Err = err("AttributeError", "'Datum' object has no attribute 'sync'")
        /* r.expr(1).sync() */

    	suite.T().Log("About to run line #39: r.Expr(1).Sync()")

        actual := r.Expr(1).Sync()

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #39")
    }

    {
        // mutation/sync.yaml line #48
        /* partial({'tables_dropped':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"tables_dropped": 1, })
        /* r.db('test').table_drop('test1') */

    	suite.T().Log("About to run line #48: r.DB('test').TableDrop('test1')")

        cursor, err := r.DB("test").TableDrop("test1").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #48")
    }

    {
        // mutation/sync.yaml line #50
        /* partial({'tables_dropped':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"tables_dropped": 1, })
        /* r.db('test').table_drop('test1soft') */

    	suite.T().Log("About to run line #50: r.DB('test').TableDrop('test1soft')")

        cursor, err := r.DB("test").TableDrop("test1soft").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #50")
    }
}
