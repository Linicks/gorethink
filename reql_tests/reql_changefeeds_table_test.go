// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestChangefeedsTableSuite(t *testing.T) {
    suite.Run(t, new(ChangefeedsTableSuite ))
}

type ChangefeedsTableSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *ChangefeedsTableSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *ChangefeedsTableSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
	 r.DB("test").TableDrop("tbl").Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *ChangefeedsTableSuite) TestCases() {
	tbl := r.DB("test").Table("tbl")


    // changefeeds/table.yaml line #9
    // all = tbl.changes()
    suite.T().Log("Possibly executing: var all r.Term = tbl.Changes()")

    var all r.Term = tbl.Changes()
	

    {
        // changefeeds/table.yaml line #15
        /* partial({'errors':0, 'inserted':2}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "inserted": 2, })
        /* tbl.insert([{'id':1}, {'id':2}]) */

    	suite.T().Log("About to run line #15: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 1, }, map[interface{}]interface{}{'id': 2, }})")

        cursor, err := tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 1, }, map[interface{}]interface{}{"id": 2, }}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #15")
    }

    {
        // changefeeds/table.yaml line #17
        /* bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
        var expected_ Expected = bag([]interface{}{map[interface{}]interface{}{"old_val": nil, "new_val": map[interface{}]interface{}{"id": 1, }, }, map[interface{}]interface{}{"old_val": nil, "new_val": map[interface{}]interface{}{"id": 2, }, }})
        /* fetch(all, 2) */

    	suite.T().Log("About to run line #17: fetch(all, 2)")

        fetch(suite.Suite, suite.session, expected_, all, 2, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #17")
    }

    {
        // changefeeds/table.yaml line #22
        /* partial({'errors':0, 'replaced':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "replaced": 1, })
        /* tbl.get(1).update({'version':1}) */

    	suite.T().Log("About to run line #22: tbl.Get(1).Update(map[interface{}]interface{}{'version': 1, })")

        cursor, err := tbl.Get(1).Update(map[interface{}]interface{}{"version": 1, }).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #22")
    }

    {
        // changefeeds/table.yaml line #24
        /* [{'old_val':{'id':1}, 'new_val':{'id':1, 'version':1}}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"old_val": map[interface{}]interface{}{"id": 1, }, "new_val": map[interface{}]interface{}{"id": 1, "version": 1, }, }}
        /* fetch(all, 1) */

    	suite.T().Log("About to run line #24: fetch(all, 1)")

        fetch(suite.Suite, suite.session, expected_, all, 1, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #24")
    }

    {
        // changefeeds/table.yaml line #29
        /* partial({'errors':0, 'deleted':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "deleted": 1, })
        /* tbl.get(1).delete() */

    	suite.T().Log("About to run line #29: tbl.Get(1).Delete()")

        cursor, err := tbl.Get(1).Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #29")
    }

    {
        // changefeeds/table.yaml line #31
        /* [{'old_val':{'id':1, 'version':1}, 'new_val':null}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"old_val": map[interface{}]interface{}{"id": 1, "version": 1, }, "new_val": nil, }}
        /* fetch(all, 1) */

    	suite.T().Log("About to run line #31: fetch(all, 1)")

        fetch(suite.Suite, suite.session, expected_, all, 1, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #31")
    }

    // changefeeds/table.yaml line #36
    // pluck = tbl.changes().pluck({'new_val':['version']})
    suite.T().Log("Possibly executing: var pluck r.Term = tbl.Changes().Pluck(map[interface{}]interface{}{'new_val': []interface{}{'version'}, })")

    var pluck r.Term = tbl.Changes().Pluck(map[interface{}]interface{}{"new_val": []interface{}{"version"}, })
	

    {
        // changefeeds/table.yaml line #37
        /* partial({'errors':0, 'inserted':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "inserted": 1, })
        /* tbl.insert([{'id':5, 'version':5}]) */

    	suite.T().Log("About to run line #37: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 5, 'version': 5, }})")

        cursor, err := tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 5, "version": 5, }}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #37")
    }

    {
        // changefeeds/table.yaml line #39
        /* [{'new_val':{'version':5}}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"version": 5, }, }}
        /* fetch(pluck, 1) */

    	suite.T().Log("About to run line #39: fetch(pluck, 1)")

        fetch(suite.Suite, suite.session, expected_, pluck, 1, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #39")
    }

    {
        // changefeeds/table.yaml line #44
        /* err('ReqlQueryLogicError', "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).") */
        var expected_ Err = err("ReqlQueryLogicError", "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).")
        /* tbl.changes().order_by('id') */

    	suite.T().Log("About to run line #44: tbl.Changes().OrderBy('id')")

        cursor, err := tbl.Changes().OrderBy("id").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #44")
    }

    // changefeeds/table.yaml line #59
    // overflow = tbl.changes()
    suite.T().Log("Possibly executing: var overflow r.Term = tbl.Changes()")

    var overflow r.Term = tbl.Changes()
	

    {
        // changefeeds/table.yaml line #64
        /* AnythingIsFine */
        var expected_ string = AnythingIsFine
        /* tbl.insert(r.range(200).map(lambda x: {})) */

    	suite.T().Log("About to run line #64: tbl.Insert(r.Range(200).Map(func(x r.Term) interface{} { return map[interface{}]interface{}{}}))")

        cursor, err := tbl.Insert(r.Range(200).Map(func(x r.Term) interface{} { return map[interface{}]interface{}{}})).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #64")
    }

    {
        // changefeeds/table.yaml line #66
        /* partial([{'error': regex('Changefeed cache over array size limit, skipped \d+ elements.')}]) */
        var expected_ Expected = partial([]interface{}{map[interface{}]interface{}{"error": regex("Changefeed cache over array size limit, skipped \\d+ elements."), }})
        /* fetch(overflow, 90) */

    	suite.T().Log("About to run line #66: fetch(overflow, 90)")

        fetch(suite.Suite, suite.session, expected_, overflow, 90, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #66")
    }

    // changefeeds/table.yaml line #71
    // vtbl = r.db('rethinkdb').table('_debug_scratch')
    suite.T().Log("Possibly executing: var vtbl r.Term = r.DB('rethinkdb').Table('_debug_scratch')")

    var vtbl r.Term = r.DB("rethinkdb").Table("_debug_scratch")
	

    // changefeeds/table.yaml line #72
    // allVirtual = vtbl.changes()
    suite.T().Log("Possibly executing: var allVirtual r.Term = vtbl.Changes()")

    var allVirtual r.Term = vtbl.Changes()
	

    {
        // changefeeds/table.yaml line #76
        /* partial({'errors':0, 'inserted':2}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "inserted": 2, })
        /* vtbl.insert([{'id':1}, {'id':2}]) */

    	suite.T().Log("About to run line #76: vtbl.Insert([]interface{}{map[interface{}]interface{}{'id': 1, }, map[interface{}]interface{}{'id': 2, }})")

        cursor, err := vtbl.Insert([]interface{}{map[interface{}]interface{}{"id": 1, }, map[interface{}]interface{}{"id": 2, }}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #76")
    }

    {
        // changefeeds/table.yaml line #78
        /* bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
        var expected_ Expected = bag([]interface{}{map[interface{}]interface{}{"old_val": nil, "new_val": map[interface{}]interface{}{"id": 1, }, }, map[interface{}]interface{}{"old_val": nil, "new_val": map[interface{}]interface{}{"id": 2, }, }})
        /* fetch(allVirtual, 2) */

    	suite.T().Log("About to run line #78: fetch(allVirtual, 2)")

        fetch(suite.Suite, suite.session, expected_, allVirtual, 2, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #78")
    }

    {
        // changefeeds/table.yaml line #83
        /* partial({'errors':0, 'replaced':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "replaced": 1, })
        /* vtbl.get(1).update({'version':1}) */

    	suite.T().Log("About to run line #83: vtbl.Get(1).Update(map[interface{}]interface{}{'version': 1, })")

        cursor, err := vtbl.Get(1).Update(map[interface{}]interface{}{"version": 1, }).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #83")
    }

    {
        // changefeeds/table.yaml line #85
        /* [{'old_val':{'id':1}, 'new_val':{'id':1, 'version':1}}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"old_val": map[interface{}]interface{}{"id": 1, }, "new_val": map[interface{}]interface{}{"id": 1, "version": 1, }, }}
        /* fetch(allVirtual, 1) */

    	suite.T().Log("About to run line #85: fetch(allVirtual, 1)")

        fetch(suite.Suite, suite.session, expected_, allVirtual, 1, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #85")
    }

    {
        // changefeeds/table.yaml line #90
        /* partial({'errors':0, 'deleted':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "deleted": 1, })
        /* vtbl.get(1).delete() */

    	suite.T().Log("About to run line #90: vtbl.Get(1).Delete()")

        cursor, err := vtbl.Get(1).Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #90")
    }

    {
        // changefeeds/table.yaml line #92
        /* [{'old_val':{'id':1, 'version':1}, 'new_val':null}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"old_val": map[interface{}]interface{}{"id": 1, "version": 1, }, "new_val": nil, }}
        /* fetch(allVirtual, 1) */

    	suite.T().Log("About to run line #92: fetch(allVirtual, 1)")

        fetch(suite.Suite, suite.session, expected_, allVirtual, 1, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #92")
    }

    // changefeeds/table.yaml line #97
    // vpluck = vtbl.changes().pluck({'new_val':['version']})
    suite.T().Log("Possibly executing: var vpluck r.Term = vtbl.Changes().Pluck(map[interface{}]interface{}{'new_val': []interface{}{'version'}, })")

    var vpluck r.Term = vtbl.Changes().Pluck(map[interface{}]interface{}{"new_val": []interface{}{"version"}, })
	

    {
        // changefeeds/table.yaml line #98
        /* partial({'errors':0, 'inserted':1}) */
        var expected_ Expected = partial(map[interface{}]interface{}{"errors": 0, "inserted": 1, })
        /* vtbl.insert([{'id':5, 'version':5}]) */

    	suite.T().Log("About to run line #98: vtbl.Insert([]interface{}{map[interface{}]interface{}{'id': 5, 'version': 5, }})")

        cursor, err := vtbl.Insert([]interface{}{map[interface{}]interface{}{"id": 5, "version": 5, }}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #98")
    }

    {
        // changefeeds/table.yaml line #100
        /* [{'new_val':{'version':5}}] */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"new_val": map[interface{}]interface{}{"version": 5, }, }}
        /* fetch(vpluck, 1) */

    	suite.T().Log("About to run line #100: fetch(vpluck, 1)")

        fetch(suite.Suite, suite.session, expected_, vpluck, 1, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #100")
    }
}
