// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestDatumNumberSuite(t *testing.T) {
    suite.Run(t, new(DatumNumberSuite ))
}

type DatumNumberSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *DatumNumberSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *DatumNumberSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *DatumNumberSuite) TestCases() {


    {
        // datum/number.yaml line #6
        /* 1 */
        var expected_ int = 1
        /* r.expr(1) */

    	suite.T().Log("About to run line #6: r.Expr(1)")

        cursor, err := r.Expr(1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #6")
    }

    {
        // datum/number.yaml line #15
        /* -1 */
        var expected_ int = -1
        /* r.expr(-1) */

    	suite.T().Log("About to run line #15: r.Expr(-1)")

        cursor, err := r.Expr(-1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #15")
    }

    {
        // datum/number.yaml line #24
        /* 0 */
        var expected_ int = 0
        /* r.expr(0) */

    	suite.T().Log("About to run line #24: r.Expr(0)")

        cursor, err := r.Expr(0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #24")
    }

    {
        // datum/number.yaml line #35
        /* 1.0 */
        var expected_ float64 = 1.0
        /* r.expr(1.0) */

    	suite.T().Log("About to run line #35: r.Expr(1.0)")

        cursor, err := r.Expr(1.0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #35")
    }

    {
        // datum/number.yaml line #44
        /* 1.5 */
        var expected_ float64 = 1.5
        /* r.expr(1.5) */

    	suite.T().Log("About to run line #44: r.Expr(1.5)")

        cursor, err := r.Expr(1.5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #44")
    }

    {
        // datum/number.yaml line #53
        /* -0.5 */
        var expected_ float64 = -0.5
        /* r.expr(-0.5) */

    	suite.T().Log("About to run line #53: r.Expr(-0.5)")

        cursor, err := r.Expr(-0.5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #53")
    }

    {
        // datum/number.yaml line #62
        /* 67498.89278 */
        var expected_ float64 = 67498.89278
        /* r.expr(67498.89278) */

    	suite.T().Log("About to run line #62: r.Expr(67498.89278)")

        cursor, err := r.Expr(67498.89278).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #62")
    }

    {
        // datum/number.yaml line #73
        /* 1234567890 */
        var expected_ int = 1234567890
        /* r.expr(1234567890) */

    	suite.T().Log("About to run line #73: r.Expr(1234567890)")

        cursor, err := r.Expr(1234567890).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #73")
    }

    {
        // datum/number.yaml line #83
        /* -73850380122423 */
        var expected_ int = -73850380122423
        /* r.expr(-73850380122423) */

    	suite.T().Log("About to run line #83: r.Expr(-73850380122423)")

        cursor, err := r.Expr(-73850380122423).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #83")
    }

    {
        // datum/number.yaml line #95
        /* float(1234567890123456789012345678901234567890) */
        var expected_ float64 = float64(1234567890123456789012345678901234567890.0)
        /* r.expr(1234567890123456789012345678901234567890) */

    	suite.T().Log("About to run line #95: r.Expr(1234567890123456789012345678901234567890.0)")

        cursor, err := r.Expr(1234567890123456789012345678901234567890.0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #95")
    }

    {
        // datum/number.yaml line #100
        /* 123.4567890123456789012345678901234567890 */
        var expected_ float64 = 123.45678901234568
        /* r.expr(123.4567890123456789012345678901234567890) */

    	suite.T().Log("About to run line #100: r.Expr(123.45678901234568)")

        cursor, err := r.Expr(123.45678901234568).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #100")
    }

    {
        // datum/number.yaml line #103
        /* 'NUMBER' */
        var expected_ string = "NUMBER"
        /* r.expr(1).type_of() */

    	suite.T().Log("About to run line #103: r.Expr(1).TypeOf()")

        cursor, err := r.Expr(1).TypeOf().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #103")
    }

    {
        // datum/number.yaml line #107
        /* '1' */
        var expected_ string = "1"
        /* r.expr(1).coerce_to('string') */

    	suite.T().Log("About to run line #107: r.Expr(1).CoerceTo('string')")

        cursor, err := r.Expr(1).CoerceTo("string").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #107")
    }

    {
        // datum/number.yaml line #110
        /* 1 */
        var expected_ int = 1
        /* r.expr(1).coerce_to('number') */

    	suite.T().Log("About to run line #110: r.Expr(1).CoerceTo('number')")

        cursor, err := r.Expr(1).CoerceTo("number").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #110")
    }

    {
        // datum/number.yaml line #115
        /* int_cmp(1) */
        var expected_ int = int_cmp(1)
        /* r.expr(1.0) */

    	suite.T().Log("About to run line #115: r.Expr(1.0)")

        cursor, err := r.Expr(1.0).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #115")
    }

    {
        // datum/number.yaml line #119
        /* int_cmp(45) */
        var expected_ int = int_cmp(45)
        /* r.expr(45) */

    	suite.T().Log("About to run line #119: r.Expr(45)")

        cursor, err := r.Expr(45).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #119")
    }

    {
        // datum/number.yaml line #123
        /* float_cmp(1.2) */
        var expected_ float64 = float_cmp(1.2)
        /* r.expr(1.2) */

    	suite.T().Log("About to run line #123: r.Expr(1.2)")

        cursor, err := r.Expr(1.2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #123")
    }
}
