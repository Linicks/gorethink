// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestMathLogicMulSuite(t *testing.T) {
    suite.Run(t, new(MathLogicMulSuite ))
}

type MathLogicMulSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *MathLogicMulSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *MathLogicMulSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *MathLogicMulSuite) TestCases() {


    {
        // math_logic/mul.yaml line #6
        /* 2 */
        var expected_ int = 2
        /* r.expr(1) * 2 */

    	suite.T().Log("About to run line #6: r.Expr(1).Mul(2)")

        cursor, err := r.Expr(1).Mul(2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #6")
    }

    {
        // math_logic/mul.yaml line #7
        /* 2 */
        var expected_ int = 2
        /* 1 * r.expr(2) */

    	suite.T().Log("About to run line #7: r.Mul(1, r.Expr(2))")

        cursor, err := r.Mul(1, r.Expr(2)).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #7")
    }

    {
        // math_logic/mul.yaml line #8
        /* 2 */
        var expected_ int = 2
        /* r.expr(1).mul(2) */

    	suite.T().Log("About to run line #8: r.Expr(1).Mul(2)")

        cursor, err := r.Expr(1).Mul(2).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #8")
    }

    {
        // math_logic/mul.yaml line #15
        /* 1 */
        var expected_ int = 1
        /* r.expr(-1) * -1 */

    	suite.T().Log("About to run line #15: r.Expr(-1).Mul(-1)")

        cursor, err := r.Expr(-1).Mul(-1).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #15")
    }

    {
        // math_logic/mul.yaml line #20
        /* 'aaaaa' */
        var expected_ string = "aaaaa"
        /* 'a'*5 */

    	suite.T().Log("About to run line #20: r.Mul('a', 5)")

        actual := r.Mul("a", 5)

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #20")
    }

    {
        // math_logic/mul.yaml line #24
        /* 6.75 */
        var expected_ float64 = 6.75
        /* r.expr(1.5) * 4.5 */

    	suite.T().Log("About to run line #24: r.Expr(1.5).Mul(4.5)")

        cursor, err := r.Expr(1.5).Mul(4.5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #24")
    }

    {
        // math_logic/mul.yaml line #28
        /* [1,2,3,1,2,3,1,2,3] */
        var expected_ []interface{} = []interface{}{1, 2, 3, 1, 2, 3, 1, 2, 3}
        /* r.expr([1,2,3]) * 3 */

    	suite.T().Log("About to run line #28: r.Expr([]interface{}{1, 2, 3}).Mul(3)")

        cursor, err := r.Expr([]interface{}{1, 2, 3}).Mul(3).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #28")
    }

    {
        // math_logic/mul.yaml line #33
        /* 120 */
        var expected_ int = 120
        /* r.expr(1).mul(2,3,4,5) */

    	suite.T().Log("About to run line #33: r.Expr(1).Mul(2, 3, 4, 5)")

        cursor, err := r.Expr(1).Mul(2, 3, 4, 5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #33")
    }

    {
        // math_logic/mul.yaml line #49
        /* err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [0]) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.")
        /* r.expr('a') * 0.8 */

    	suite.T().Log("About to run line #49: r.Expr('a').Mul(0.8)")

        cursor, err := r.Expr("a").Mul(0.8).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #49")
    }

    {
        // math_logic/mul.yaml line #53
        /* err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [1]) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.")
        /* r.expr(1) * 'a' */

    	suite.T().Log("About to run line #53: r.Expr(1).Mul('a')")

        cursor, err := r.Expr(1).Mul("a").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #53")
    }

    {
        // math_logic/mul.yaml line #57
        /* err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [0]) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.")
        /* r.expr('b') * 'a' */

    	suite.T().Log("About to run line #57: r.Expr('b').Mul('a')")

        cursor, err := r.Expr("b").Mul("a").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #57")
    }

    {
        // math_logic/mul.yaml line #61
        /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
        var expected_ Err = err("ReqlQueryLogicError", "Number not an integer: 1.5")
        /* r.expr([]) * 1.5 */

    	suite.T().Log("About to run line #61: r.Expr([]interface{}{}).Mul(1.5)")

        cursor, err := r.Expr([]interface{}{}).Mul(1.5).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #61")
    }
}
