// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestDatumBoolSuite(t *testing.T) {
    suite.Run(t, new(DatumBoolSuite ))
}

type DatumBoolSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *DatumBoolSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *DatumBoolSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *DatumBoolSuite) TestCases() {


    {
        // datum/bool.yaml line #3
        /* true */
        var expected_ bool = true
        /* r.expr(True) */

    	suite.T().Log("About to run line #3: r.Expr(true)")

        cursor, err := r.Expr(true).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #3")
    }

    {
        // datum/bool.yaml line #10
        /* false */
        var expected_ bool = false
        /* r.expr(False) */

    	suite.T().Log("About to run line #10: r.Expr(false)")

        cursor, err := r.Expr(false).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #10")
    }

    {
        // datum/bool.yaml line #17
        /* 'BOOL' */
        var expected_ string = "BOOL"
        /* r.expr(False).type_of() */

    	suite.T().Log("About to run line #17: r.Expr(false).TypeOf()")

        cursor, err := r.Expr(false).TypeOf().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #17")
    }

    {
        // datum/bool.yaml line #21
        /* 'true' */
        var expected_ string = "true"
        /* r.expr(True).coerce_to('string') */

    	suite.T().Log("About to run line #21: r.Expr(true).CoerceTo('string')")

        cursor, err := r.Expr(true).CoerceTo("string").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #21")
    }

    {
        // datum/bool.yaml line #24
        /* True */
        var expected_ bool = true
        /* r.expr(True).coerce_to('bool') */

    	suite.T().Log("About to run line #24: r.Expr(true).CoerceTo('bool')")

        cursor, err := r.Expr(true).CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #24")
    }

    {
        // datum/bool.yaml line #27
        /* False */
        var expected_ bool = false
        /* r.expr(False).coerce_to('bool') */

    	suite.T().Log("About to run line #27: r.Expr(false).CoerceTo('bool')")

        cursor, err := r.Expr(false).CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #27")
    }

    {
        // datum/bool.yaml line #30
        /* False */
        var expected_ bool = false
        /* r.expr(null).coerce_to('bool') */

    	suite.T().Log("About to run line #30: r.Expr(nil).CoerceTo('bool')")

        cursor, err := r.Expr(nil).CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #30")
    }

    {
        // datum/bool.yaml line #33
        /* True */
        var expected_ bool = true
        /* r.expr(0).coerce_to('bool') */

    	suite.T().Log("About to run line #33: r.Expr(0).CoerceTo('bool')")

        cursor, err := r.Expr(0).CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #33")
    }

    {
        // datum/bool.yaml line #36
        /* True */
        var expected_ bool = true
        /* r.expr('false').coerce_to('bool') */

    	suite.T().Log("About to run line #36: r.Expr('false').CoerceTo('bool')")

        cursor, err := r.Expr("false").CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #36")
    }

    {
        // datum/bool.yaml line #39
        /* True */
        var expected_ bool = true
        /* r.expr('foo').coerce_to('bool') */

    	suite.T().Log("About to run line #39: r.Expr('foo').CoerceTo('bool')")

        cursor, err := r.Expr("foo").CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #39")
    }

    {
        // datum/bool.yaml line #42
        /* True */
        var expected_ bool = true
        /* r.expr([]).coerce_to('bool') */

    	suite.T().Log("About to run line #42: r.Expr([]interface{}{}).CoerceTo('bool')")

        cursor, err := r.Expr([]interface{}{}).CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #42")
    }

    {
        // datum/bool.yaml line #45
        /* True */
        var expected_ bool = true
        /* r.expr({}).coerce_to('bool') */

    	suite.T().Log("About to run line #45: r.Expr(map[interface{}]interface{}{}).CoerceTo('bool')")

        cursor, err := r.Expr(map[interface{}]interface{}{}).CoerceTo("bool").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #45")
    }
}
