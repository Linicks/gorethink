// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestTimesIndexSuite(t *testing.T) {
    suite.Run(t, new(TimesIndexSuite ))
}

type TimesIndexSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *TimesIndexSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *TimesIndexSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
	 r.DB("test").TableDrop("tbl").Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *TimesIndexSuite) TestCases() {
	tbl := r.DB("test").Table("tbl")


    // times/index.yaml line #7
    // ts={"timezone":"-07:00","epoch_time":1375445162.0872,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var ts map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445162.0872, '$reql_type$': 'TIME', }")

    var ts map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445162.0872, "$reql_type$": "TIME", }
	

    // times/index.yaml line #11
    // t1={"timezone":"-07:00","epoch_time":1375445163.0872,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var t1 map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445163.0872, '$reql_type$': 'TIME', }")

    var t1 map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445163.0872, "$reql_type$": "TIME", }
	

    // times/index.yaml line #15
    // t2={"timezone":"-07:00","epoch_time":1375445163.08832,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var t2 map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445163.08832, '$reql_type$': 'TIME', }")

    var t2 map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445163.08832, "$reql_type$": "TIME", }
	

    // times/index.yaml line #19
    // t3={"timezone":"-07:00","epoch_time":1375445163.08943,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var t3 map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445163.08943, '$reql_type$': 'TIME', }")

    var t3 map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445163.08943, "$reql_type$": "TIME", }
	

    // times/index.yaml line #23
    // t4={"timezone":"-07:00","epoch_time":1375445163.09055,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var t4 map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445163.09055, '$reql_type$': 'TIME', }")

    var t4 map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445163.09055, "$reql_type$": "TIME", }
	

    // times/index.yaml line #27
    // t5={"timezone":"-07:00","epoch_time":1375445163.09166,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var t5 map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445163.09166, '$reql_type$': 'TIME', }")

    var t5 map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445163.09166, "$reql_type$": "TIME", }
	

    // times/index.yaml line #31
    // te={"timezone":"-07:00","epoch_time":1375445164.0872,"$reql_type$":"TIME"}
    suite.T().Log("Possibly executing: var te map[interface{}]interface{} = map[interface{}]interface{}{'timezone': '-07:00', 'epoch_time': 1375445164.0872, '$reql_type$': 'TIME', }")

    var te map[interface{}]interface{} = map[interface{}]interface{}{"timezone": "-07:00", "epoch_time": 1375445164.0872, "$reql_type$": "TIME", }
	

    // times/index.yaml line #36
    // trows = [{'id':t1}, {'id':t2}, {'id':t3}, {'id':t4}, {'id':t5}]
    suite.T().Log("Possibly executing: var trows []interface{} = []interface{}{map[interface{}]interface{}{'id': t1, }, map[interface{}]interface{}{'id': t2, }, map[interface{}]interface{}{'id': t3, }, map[interface{}]interface{}{'id': t4, }, map[interface{}]interface{}{'id': t5, }}")

    var trows []interface{} = []interface{}{map[interface{}]interface{}{"id": t1, }, map[interface{}]interface{}{"id": t2, }, map[interface{}]interface{}{"id": t3, }, map[interface{}]interface{}{"id": t4, }, map[interface{}]interface{}{"id": t5, }}
	

    {
        // times/index.yaml line #37
        /* 5 */
        var expected_ int = 5
        /* tbl.insert(trows)['inserted'] */

    	suite.T().Log("About to run line #37: tbl.Insert(trows).AtIndex('inserted')")

        cursor, err := tbl.Insert(trows).AtIndex("inserted").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #37")
    }

    // times/index.yaml line #41
    // bad_insert = [{'id':r.expr(t1).in_timezone("Z")}]
    suite.T().Log("Possibly executing: var bad_insert []interface{} = []interface{}{map[interface{}]interface{}{'id': r.Expr(t1).InTimezone('Z'), }}")

    var bad_insert []interface{} = []interface{}{map[interface{}]interface{}{"id": r.Expr(t1).InTimezone("Z"), }}
	

    {
        // times/index.yaml line #42
        /* ("Duplicate primary key `id`:\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"-07:00\"\n\t}\n}\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"+00:00\"\n\t}\n}") */
        var expected_ string = "Duplicate primary key `id`:\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"-07:00\"\n\t}\n}\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"+00:00\"\n\t}\n}"
        /* tbl.insert(bad_insert)['first_error'] */

    	suite.T().Log("About to run line #42: tbl.Insert(bad_insert).AtIndex('first_error')")

        cursor, err := tbl.Insert(bad_insert).AtIndex("first_error").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #42")
    }

    {
        // times/index.yaml line #46
        /* 5 */
        var expected_ int = 5
        /* tbl.between(ts, te).count() */

    	suite.T().Log("About to run line #46: tbl.Between(ts, te).Count()")

        cursor, err := tbl.Between(ts, te).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #46")
    }

    {
        // times/index.yaml line #48
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, t4).count() */

    	suite.T().Log("About to run line #48: tbl.Between(t1, t4).Count()")

        cursor, err := tbl.Between(t1, t4).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #48")
    }

    {
        // times/index.yaml line #51
        /* 4 */
        var expected_ int = 4
        /* tbl.between(t1, t4, right_bound='closed').count() */

    	suite.T().Log("About to run line #51: tbl.Between(t1, t4, r.BetweenOpts{RightBound: 'closed', }).Count()")

        cursor, err := tbl.Between(t1, t4, r.BetweenOpts{RightBound: "closed", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #51")
    }

    {
        // times/index.yaml line #54
        /* 5 */
        var expected_ int = 5
        /* tbl.between(r.expr(ts).in_timezone("+06:00"), te).count() */

    	suite.T().Log("About to run line #54: tbl.Between(r.Expr(ts).InTimezone('+06:00'), te).Count()")

        cursor, err := tbl.Between(r.Expr(ts).InTimezone("+06:00"), te).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #54")
    }

    {
        // times/index.yaml line #56
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, r.expr(t4).in_timezone("+08:00")).count() */

    	suite.T().Log("About to run line #56: tbl.Between(t1, r.Expr(t4).InTimezone('+08:00')).Count()")

        cursor, err := tbl.Between(t1, r.Expr(t4).InTimezone("+08:00")).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #56")
    }

    {
        // times/index.yaml line #59
        /* 4 */
        var expected_ int = 4
        /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed').count() */

    	suite.T().Log("About to run line #59: tbl.Between(r.Expr(t1).InTimezone('Z'), t4, r.BetweenOpts{RightBound: 'closed', }).Count()")

        cursor, err := tbl.Between(r.Expr(t1).InTimezone("Z"), t4, r.BetweenOpts{RightBound: "closed", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #59")
    }

    {
        // times/index.yaml line #64
        /* 5 */
        var expected_ int = 5
        /* tbl.update(lambda row:{'a':row['id']})['replaced'] */

    	suite.T().Log("About to run line #64: tbl.Update(func(row r.Term) interface{} { return map[interface{}]interface{}{'a': row.AtIndex('id'), }}).AtIndex('replaced')")

        cursor, err := tbl.Update(func(row r.Term) interface{} { return map[interface{}]interface{}{"a": row.AtIndex("id"), }}).AtIndex("replaced").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #64")
    }

    {
        // times/index.yaml line #67
        /* ({'created':1}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"created": 1, }
        /* tbl.index_create('a') */

    	suite.T().Log("About to run line #67: tbl.IndexCreate('a')")

        cursor, err := tbl.IndexCreate("a").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #67")
    }

    {
        // times/index.yaml line #69
        /* 1 */
        var expected_ int = 1
        /* tbl.index_wait('a').count() */

    	suite.T().Log("About to run line #69: tbl.IndexWait('a').Count()")

        cursor, err := tbl.IndexWait("a").Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #69")
    }

    {
        // times/index.yaml line #73
        /* 5 */
        var expected_ int = 5
        /* tbl.between(ts, te, index='a').count() */

    	suite.T().Log("About to run line #73: tbl.Between(ts, te, r.BetweenOpts{Index: 'a', }).Count()")

        cursor, err := tbl.Between(ts, te, r.BetweenOpts{Index: "a", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #73")
    }

    {
        // times/index.yaml line #77
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, t4, index='a').count() */

    	suite.T().Log("About to run line #77: tbl.Between(t1, t4, r.BetweenOpts{Index: 'a', }).Count()")

        cursor, err := tbl.Between(t1, t4, r.BetweenOpts{Index: "a", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #77")
    }

    {
        // times/index.yaml line #81
        /* 4 */
        var expected_ int = 4
        /* tbl.between(t1, t4, right_bound='closed', index='a').count() */

    	suite.T().Log("About to run line #81: tbl.Between(t1, t4, r.BetweenOpts{RightBound: 'closed', Index: 'a', }).Count()")

        cursor, err := tbl.Between(t1, t4, r.BetweenOpts{RightBound: "closed", Index: "a", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #81")
    }

    {
        // times/index.yaml line #85
        /* 5 */
        var expected_ int = 5
        /* tbl.between(r.expr(ts).in_timezone("+06:00"), te, index='a').count() */

    	suite.T().Log("About to run line #85: tbl.Between(r.Expr(ts).InTimezone('+06:00'), te, r.BetweenOpts{Index: 'a', }).Count()")

        cursor, err := tbl.Between(r.Expr(ts).InTimezone("+06:00"), te, r.BetweenOpts{Index: "a", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #85")
    }

    {
        // times/index.yaml line #89
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, r.expr(t4).in_timezone("+08:00"), index='a').count() */

    	suite.T().Log("About to run line #89: tbl.Between(t1, r.Expr(t4).InTimezone('+08:00'), r.BetweenOpts{Index: 'a', }).Count()")

        cursor, err := tbl.Between(t1, r.Expr(t4).InTimezone("+08:00"), r.BetweenOpts{Index: "a", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #89")
    }

    {
        // times/index.yaml line #93
        /* 4 */
        var expected_ int = 4
        /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed', index='a').count() */

    	suite.T().Log("About to run line #93: tbl.Between(r.Expr(t1).InTimezone('Z'), t4, r.BetweenOpts{RightBound: 'closed', Index: 'a', }).Count()")

        cursor, err := tbl.Between(r.Expr(t1).InTimezone("Z"), t4, r.BetweenOpts{RightBound: "closed", Index: "a", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #93")
    }

    {
        // times/index.yaml line #98
        /* ({'created':1}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"created": 1, }
        /* tbl.index_create('b', lambda row:r.branch(row['id'] < t4, row['a'], null)) */

    	suite.T().Log("About to run line #98: tbl.IndexCreateFunc('b', func(row r.Term) interface{} { return r.Branch(row.AtIndex('id').Lt(t4), row.AtIndex('a'), nil)})")

        cursor, err := tbl.IndexCreateFunc("b", func(row r.Term) interface{} { return r.Branch(row.AtIndex("id").Lt(t4), row.AtIndex("a"), nil)}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #98")
    }

    {
        // times/index.yaml line #101
        /* 1 */
        var expected_ int = 1
        /* tbl.index_wait('b').count() */

    	suite.T().Log("About to run line #101: tbl.IndexWait('b').Count()")

        cursor, err := tbl.IndexWait("b").Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #101")
    }

    {
        // times/index.yaml line #105
        /* 1 */
        var expected_ int = 1
        /* tbl.index_wait('b').count() */

    	suite.T().Log("About to run line #105: tbl.IndexWait('b').Count()")

        cursor, err := tbl.IndexWait("b").Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #105")
    }

    {
        // times/index.yaml line #109
        /* 3 */
        var expected_ int = 3
        /* tbl.between(ts, te, index='b').count() */

    	suite.T().Log("About to run line #109: tbl.Between(ts, te, r.BetweenOpts{Index: 'b', }).Count()")

        cursor, err := tbl.Between(ts, te, r.BetweenOpts{Index: "b", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #109")
    }

    {
        // times/index.yaml line #113
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, t4, index='b').count() */

    	suite.T().Log("About to run line #113: tbl.Between(t1, t4, r.BetweenOpts{Index: 'b', }).Count()")

        cursor, err := tbl.Between(t1, t4, r.BetweenOpts{Index: "b", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #113")
    }

    {
        // times/index.yaml line #117
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, t4, right_bound='closed', index='b').count() */

    	suite.T().Log("About to run line #117: tbl.Between(t1, t4, r.BetweenOpts{RightBound: 'closed', Index: 'b', }).Count()")

        cursor, err := tbl.Between(t1, t4, r.BetweenOpts{RightBound: "closed", Index: "b", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #117")
    }

    {
        // times/index.yaml line #121
        /* 3 */
        var expected_ int = 3
        /* tbl.between(r.expr(ts).in_timezone("+06:00"), te, index='b').count() */

    	suite.T().Log("About to run line #121: tbl.Between(r.Expr(ts).InTimezone('+06:00'), te, r.BetweenOpts{Index: 'b', }).Count()")

        cursor, err := tbl.Between(r.Expr(ts).InTimezone("+06:00"), te, r.BetweenOpts{Index: "b", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #121")
    }

    {
        // times/index.yaml line #125
        /* 3 */
        var expected_ int = 3
        /* tbl.between(t1, r.expr(t4).in_timezone("+08:00"), index='b').count() */

    	suite.T().Log("About to run line #125: tbl.Between(t1, r.Expr(t4).InTimezone('+08:00'), r.BetweenOpts{Index: 'b', }).Count()")

        cursor, err := tbl.Between(t1, r.Expr(t4).InTimezone("+08:00"), r.BetweenOpts{Index: "b", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #125")
    }

    {
        // times/index.yaml line #129
        /* 3 */
        var expected_ int = 3
        /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed', index='b').count() */

    	suite.T().Log("About to run line #129: tbl.Between(r.Expr(t1).InTimezone('Z'), t4, r.BetweenOpts{RightBound: 'closed', Index: 'b', }).Count()")

        cursor, err := tbl.Between(r.Expr(t1).InTimezone("Z"), t4, r.BetweenOpts{RightBound: "closed", Index: "b", }).Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #129")
    }

    // times/index.yaml line #135
    // oldtime = datetime.fromtimestamp(1375147296.681, PacificTimeZone())
    suite.T().Log("Possibly executing: var oldtime time.Time = Ast.Fromtimestamp(1375147296.681, PacificTimeZone())")

    var oldtime time.Time = Ast.Fromtimestamp(1375147296.681, PacificTimeZone())
	

    {
        // times/index.yaml line #142
        /* 1 */
        var expected_ int = 1
        /* tbl.insert([{'id':oldtime}])['inserted'] */

    	suite.T().Log("About to run line #142: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': oldtime, }}).AtIndex('inserted')")

        cursor, err := tbl.Insert([]interface{}{map[interface{}]interface{}{"id": oldtime, }}).AtIndex("inserted").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #142")
    }

    {
        // times/index.yaml line #148
        /* ("PTYPE<TIME>") */
        var expected_ string = "PTYPE<TIME>"
        /* tbl.get(oldtime)['id'].type_of() */

    	suite.T().Log("About to run line #148: tbl.Get(oldtime).AtIndex('id').TypeOf()")

        cursor, err := tbl.Get(oldtime).AtIndex("id").TypeOf().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #148")
    }
}
