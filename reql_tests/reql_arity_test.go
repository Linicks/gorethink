// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go.tpl
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// Test the arity of every function
func TestAritySuite(t *testing.T) {
    suite.Run(t, new(AritySuite ))
}

type AritySuite struct {
	suite.Suite

	session *r.Session
}

func (suite *AritySuite) SetupTest() {
	suite.T().Log("Setting up AritySuite")
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *AritySuite) TearDownSuite() {
	suite.T().Log("Tearing down AritySuite")

	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
	 r.DB("test").TableDrop("tbl").Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *AritySuite) TestCases() {
	suite.T().Log("Running AritySuite: Test the arity of every function")

	tbl := r.DB("test").Table("tbl")


    // arity.yaml line #8
    // db = r.db('test')
    suite.T().Log("Possibly executing: var db r.Term = r.DB('test')")

    var db r.Term = r.DB("test")
    _ = db // Prevent any noused variable errors


    // arity.yaml line #9
    // obj = r.expr({'a':1})
    suite.T().Log("Possibly executing: var obj r.Term = r.Expr(map[interface{}]interface{}{'a': 1, })")

    var obj r.Term = r.Expr(map[interface{}]interface{}{"a": 1, })
    _ = obj // Prevent any noused variable errors


    // arity.yaml line #10
    // array = r.expr([1])
    suite.T().Log("Possibly executing: var array r.Term = r.Expr([]interface{}{1})")

    var array r.Term = r.Expr([]interface{}{1})
    _ = array // Prevent any noused variable errors


    {
        // arity.yaml line #13
        /* err("ReqlCompileError", "Expected 0 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 0 arguments but found 1.")
        /* r.db_list(1) */

    	suite.T().Log("About to run line #13: r.DBList(1)")

        runAndAssert(suite.Suite, expected_, r.DBList(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #13")
    }

    {
        // arity.yaml line #17
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* tbl.zip(1) */

    	suite.T().Log("About to run line #17: tbl.Zip(1)")

        runAndAssert(suite.Suite, expected_, tbl.Zip(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #17")
    }

    {
        // arity.yaml line #18
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* tbl.is_empty(1) */

    	suite.T().Log("About to run line #18: tbl.IsEmpty(1)")

        runAndAssert(suite.Suite, expected_, tbl.IsEmpty(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #18")
    }

    {
        // arity.yaml line #19
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* obj.keys(1) */

    	suite.T().Log("About to run line #19: obj.Keys(1)")

        runAndAssert(suite.Suite, expected_, obj.Keys(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #19")
    }

    {
        // arity.yaml line #21
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* tbl.distinct(1) */

    	suite.T().Log("About to run line #21: tbl.Distinct(1)")

        runAndAssert(suite.Suite, expected_, tbl.Distinct(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #21")
    }

    {
        // arity.yaml line #26
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* tbl.delete(1) */

    	suite.T().Log("About to run line #26: tbl.Delete(1)")

        runAndAssert(suite.Suite, expected_, tbl.Delete(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #26")
    }

    {
        // arity.yaml line #36
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.db_create() */

    	suite.T().Log("About to run line #36: r.DBCreate()")

        runAndAssert(suite.Suite, expected_, r.DBCreate(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #36")
    }

    {
        // arity.yaml line #37
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.db_drop() */

    	suite.T().Log("About to run line #37: r.DBDrop()")

        runAndAssert(suite.Suite, expected_, r.DBDrop(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #37")
    }

    {
        // arity.yaml line #38
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.db() */

    	suite.T().Log("About to run line #38: r.DB()")

        runAndAssert(suite.Suite, expected_, r.DB(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #38")
    }

    {
        // arity.yaml line #39
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.floor() */

    	suite.T().Log("About to run line #39: r.Floor()")

        runAndAssert(suite.Suite, expected_, r.Floor(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #39")
    }

    {
        // arity.yaml line #40
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.ceil() */

    	suite.T().Log("About to run line #40: r.Ceil()")

        runAndAssert(suite.Suite, expected_, r.Ceil(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #40")
    }

    {
        // arity.yaml line #41
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.round() */

    	suite.T().Log("About to run line #41: r.Round()")

        runAndAssert(suite.Suite, expected_, r.Round(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #41")
    }

    {
        // arity.yaml line #43
        /* err("ReqlQueryLogicError", "Empty ERROR term outside a default block.", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Empty ERROR term outside a default block.")
        /* r.error() */

    	suite.T().Log("About to run line #43: r.Error()")

        runAndAssert(suite.Suite, expected_, r.Error(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #43")
    }

    {
        // arity.yaml line #46
        /* err("ReqlCompileError", "Expected 1 argument but found 0.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 0.")
        /* r.js() */

    	suite.T().Log("About to run line #46: r.JS()")

        runAndAssert(suite.Suite, expected_, r.JS(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #46")
    }

    {
        // arity.yaml line #51
        /* err_regex('TypeError', ".* takes at least 1 (?:positional )?argument \(0 given\)", []) */
        var expected_ ErrRegex = err_regex("TypeError", ".* takes at least 1 (?:positional )?argument \\(0 given\\)")
        /* r.expr() */

    	suite.T().Log("About to run line #51: r.Expr()")

        actual := r.Expr()

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #51")
    }

    {
        // arity.yaml line #63
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.concat_map() */

    	suite.T().Log("About to run line #63: tbl.ConcatMap()")

        runAndAssert(suite.Suite, expected_, tbl.ConcatMap(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #63")
    }

    {
        // arity.yaml line #64
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.skip() */

    	suite.T().Log("About to run line #64: tbl.Skip()")

        runAndAssert(suite.Suite, expected_, tbl.Skip(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #64")
    }

    {
        // arity.yaml line #65
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.limit() */

    	suite.T().Log("About to run line #65: tbl.Limit()")

        runAndAssert(suite.Suite, expected_, tbl.Limit(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #65")
    }

    {
        // arity.yaml line #66
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.append() */

    	suite.T().Log("About to run line #66: array.Append()")

        runAndAssert(suite.Suite, expected_, array.Append(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #66")
    }

    {
        // arity.yaml line #67
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.prepend() */

    	suite.T().Log("About to run line #67: array.Prepend()")

        runAndAssert(suite.Suite, expected_, array.Prepend(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #67")
    }

    {
        // arity.yaml line #68
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.difference() */

    	suite.T().Log("About to run line #68: array.Difference()")

        runAndAssert(suite.Suite, expected_, array.Difference(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #68")
    }

    {
        // arity.yaml line #69
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.set_insert() */

    	suite.T().Log("About to run line #69: array.SetInsert()")

        runAndAssert(suite.Suite, expected_, array.SetInsert(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #69")
    }

    {
        // arity.yaml line #70
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.set_union() */

    	suite.T().Log("About to run line #70: array.SetUnion()")

        runAndAssert(suite.Suite, expected_, array.SetUnion(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #70")
    }

    {
        // arity.yaml line #71
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.set_intersection() */

    	suite.T().Log("About to run line #71: array.SetIntersection()")

        runAndAssert(suite.Suite, expected_, array.SetIntersection(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #71")
    }

    {
        // arity.yaml line #72
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* array.set_difference() */

    	suite.T().Log("About to run line #72: array.SetDifference()")

        runAndAssert(suite.Suite, expected_, array.SetDifference(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #72")
    }

    {
        // arity.yaml line #73
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.nth() */

    	suite.T().Log("About to run line #73: tbl.Nth()")

        runAndAssert(suite.Suite, expected_, tbl.Nth(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #73")
    }

    {
        // arity.yaml line #74
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.for_each() */

    	suite.T().Log("About to run line #74: tbl.ForEach()")

        runAndAssert(suite.Suite, expected_, tbl.ForEach(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #74")
    }

    {
        // arity.yaml line #75
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.get() */

    	suite.T().Log("About to run line #75: tbl.Get()")

        runAndAssert(suite.Suite, expected_, tbl.Get(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #75")
    }

    {
        // arity.yaml line #76
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* r.expr([]).sample() */

    	suite.T().Log("About to run line #76: r.Expr([]interface{}{}).Sample()")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).Sample(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #76")
    }

    {
        // arity.yaml line #77
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.offsets_of() */

    	suite.T().Log("About to run line #77: tbl.OffsetsOf()")

        runAndAssert(suite.Suite, expected_, tbl.OffsetsOf(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #77")
    }

    {
        // arity.yaml line #80
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.db_create(1,2) */

    	suite.T().Log("About to run line #80: r.DBCreate(1, 2)")

        runAndAssert(suite.Suite, expected_, r.DBCreate(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #80")
    }

    {
        // arity.yaml line #81
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.db_drop(1,2) */

    	suite.T().Log("About to run line #81: r.DBDrop(1, 2)")

        runAndAssert(suite.Suite, expected_, r.DBDrop(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #81")
    }

    {
        // arity.yaml line #82
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.db(1,2) */

    	suite.T().Log("About to run line #82: r.DB(1, 2)")

        runAndAssert(suite.Suite, expected_, r.DB(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #82")
    }

    {
        // arity.yaml line #83
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.floor(1, 2) */

    	suite.T().Log("About to run line #83: r.Floor(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Floor(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #83")
    }

    {
        // arity.yaml line #84
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.ceil(1, 2) */

    	suite.T().Log("About to run line #84: r.Ceil(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Ceil(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #84")
    }

    {
        // arity.yaml line #85
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.round(1, 2) */

    	suite.T().Log("About to run line #85: r.Round(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Round(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #85")
    }

    {
        // arity.yaml line #87
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.filter() */

    	suite.T().Log("About to run line #87: tbl.Filter()")

        runAndAssert(suite.Suite, expected_, tbl.Filter(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #87")
    }

    {
        // arity.yaml line #92
        /* err("ReqlCompileError", "Expected between 0 and 1 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected between 0 and 1 arguments but found 2.")
        /* r.error(1, 2) */

    	suite.T().Log("About to run line #92: r.Error(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Error(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #92")
    }

    {
        // arity.yaml line #95
        /* err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:")
        /* db.table_drop() */

    	suite.T().Log("About to run line #95: db.TableDrop()")

        runAndAssert(suite.Suite, expected_, db.TableDrop(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #95")
    }

    {
        // arity.yaml line #99
        /* err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:")
        /* db.table_create() */

    	suite.T().Log("About to run line #99: db.TableCreate()")

        runAndAssert(suite.Suite, expected_, db.TableCreate(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #99")
    }

    {
        // arity.yaml line #104
        /* err("ReqlCompileError", "Expected 1 argument but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 1 argument but found 2.")
        /* r.js(1,2) */

    	suite.T().Log("About to run line #104: r.JS(1, 2)")

        runAndAssert(suite.Suite, expected_, r.JS(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #104")
    }

    {
        // arity.yaml line #111
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.concat_map(1,2) */

    	suite.T().Log("About to run line #111: tbl.ConcatMap(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.ConcatMap(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #111")
    }

    {
        // arity.yaml line #112
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.skip(1,2) */

    	suite.T().Log("About to run line #112: tbl.Skip(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.Skip(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #112")
    }

    {
        // arity.yaml line #113
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.limit(1,2) */

    	suite.T().Log("About to run line #113: tbl.Limit(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.Limit(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #113")
    }

    {
        // arity.yaml line #114
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.append(1,2) */

    	suite.T().Log("About to run line #114: array.Append(1, 2)")

        runAndAssert(suite.Suite, expected_, array.Append(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #114")
    }

    {
        // arity.yaml line #115
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.prepend(1,2) */

    	suite.T().Log("About to run line #115: array.Prepend(1, 2)")

        runAndAssert(suite.Suite, expected_, array.Prepend(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #115")
    }

    {
        // arity.yaml line #116
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.difference([], []) */

    	suite.T().Log("About to run line #116: array.Difference([]interface{}{}, []interface{}{})")

        runAndAssert(suite.Suite, expected_, array.Difference([]interface{}{}, []interface{}{}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #116")
    }

    {
        // arity.yaml line #117
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.set_insert(1,2) */

    	suite.T().Log("About to run line #117: array.SetInsert(1, 2)")

        runAndAssert(suite.Suite, expected_, array.SetInsert(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #117")
    }

    {
        // arity.yaml line #118
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.set_union([1],[2]) */

    	suite.T().Log("About to run line #118: array.SetUnion([]interface{}{1}, []interface{}{2})")

        runAndAssert(suite.Suite, expected_, array.SetUnion([]interface{}{1}, []interface{}{2}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #118")
    }

    {
        // arity.yaml line #119
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.set_intersection([1],[2]) */

    	suite.T().Log("About to run line #119: array.SetIntersection([]interface{}{1}, []interface{}{2})")

        runAndAssert(suite.Suite, expected_, array.SetIntersection([]interface{}{1}, []interface{}{2}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #119")
    }

    {
        // arity.yaml line #120
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* array.set_difference([1],[2]) */

    	suite.T().Log("About to run line #120: array.SetDifference([]interface{}{1}, []interface{}{2})")

        runAndAssert(suite.Suite, expected_, array.SetDifference([]interface{}{1}, []interface{}{2}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #120")
    }

    {
        // arity.yaml line #121
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.nth(1,2) */

    	suite.T().Log("About to run line #121: tbl.Nth(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.Nth(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #121")
    }

    {
        // arity.yaml line #122
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.for_each(1,2) */

    	suite.T().Log("About to run line #122: tbl.ForEach(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.ForEach(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #122")
    }

    {
        // arity.yaml line #123
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.get(1,2) */

    	suite.T().Log("About to run line #123: tbl.Get(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.Get(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #123")
    }

    {
        // arity.yaml line #124
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* r.expr([]).sample(1,2) */

    	suite.T().Log("About to run line #124: r.Expr([]interface{}{}).Sample(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).Sample(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #124")
    }

    {
        // arity.yaml line #125
        /* err("ReqlCompileError", "Expected 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 3.")
        /* tbl.offsets_of(1,2) */

    	suite.T().Log("About to run line #125: tbl.OffsetsOf(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.OffsetsOf(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #125")
    }

    {
        // arity.yaml line #127
        /* err("ReqlCompileError", "Expected 2 arguments but found 4.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 4.")
        /* tbl.filter(1,2,3) */

    	suite.T().Log("About to run line #127: tbl.Filter(1, 2, 3)")

        runAndAssert(suite.Suite, expected_, tbl.Filter(1, 2, 3), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #127")
    }

    {
        // arity.yaml line #132
        /* err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.")
        /* db.table_drop(1,2) */

    	suite.T().Log("About to run line #132: db.TableDrop(1, 2)")

        runAndAssert(suite.Suite, expected_, db.TableDrop(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #132")
    }

    {
        // arity.yaml line #135
        /* err("ReqlCompileError", "Expected between 2 and 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected between 2 and 3 arguments but found 1.")
        /* r.expr([]).delete_at() */

    	suite.T().Log("About to run line #135: r.Expr([]interface{}{}).DeleteAt()")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).DeleteAt(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #135")
    }

    {
        // arity.yaml line #143
        /* err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.")
        /* tbl.count(1,2) */

    	suite.T().Log("About to run line #143: tbl.Count(1, 2)")

        runAndAssert(suite.Suite, expected_, tbl.Count(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #143")
    }

    {
        // arity.yaml line #150
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.update() */

    	suite.T().Log("About to run line #150: tbl.Update()")

        runAndAssert(suite.Suite, expected_, tbl.Update(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #150")
    }

    {
        // arity.yaml line #151
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.replace() */

    	suite.T().Log("About to run line #151: tbl.Replace()")

        runAndAssert(suite.Suite, expected_, tbl.Replace(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #151")
    }

    {
        // arity.yaml line #152
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.insert() */

    	suite.T().Log("About to run line #152: tbl.Insert()")

        runAndAssert(suite.Suite, expected_, tbl.Insert(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #152")
    }

    {
        // arity.yaml line #154
        /* err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:")
        /* db.table() */

    	suite.T().Log("About to run line #154: db.Table()")

        runAndAssert(suite.Suite, expected_, db.Table(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #154")
    }

    {
        // arity.yaml line #159
        /* err("ReqlCompileError", "Expected 2 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 arguments but found 1.")
        /* tbl.reduce() */

    	suite.T().Log("About to run line #159: tbl.Reduce()")

        runAndAssert(suite.Suite, expected_, tbl.Reduce(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #159")
    }

    {
        // arity.yaml line #162
        /* err("ReqlCompileError", "Expected 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 1.")
        /* tbl.eq_join() */

    	suite.T().Log("About to run line #162: tbl.EqJoin()")

        runAndAssert(suite.Suite, expected_, tbl.EqJoin(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #162")
    }

    {
        // arity.yaml line #169
        /* err("ReqlCompileError", "Expected 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 1.")
        /* tbl.inner_join() */

    	suite.T().Log("About to run line #169: tbl.InnerJoin()")

        runAndAssert(suite.Suite, expected_, tbl.InnerJoin(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #169")
    }

    {
        // arity.yaml line #170
        /* err("ReqlCompileError", "Expected 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 1.")
        /* tbl.outer_join() */

    	suite.T().Log("About to run line #170: tbl.OuterJoin()")

        runAndAssert(suite.Suite, expected_, tbl.OuterJoin(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #170")
    }

    {
        // arity.yaml line #171
        /* err("ReqlCompileError", "Expected 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 1.")
        /* r.expr([]).insert_at() */

    	suite.T().Log("About to run line #171: r.Expr([]interface{}{}).InsertAt()")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).InsertAt(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #171")
    }

    {
        // arity.yaml line #172
        /* err("ReqlCompileError", "Expected 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 1.")
        /* r.expr([]).splice_at() */

    	suite.T().Log("About to run line #172: r.Expr([]interface{}{}).SpliceAt()")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).SpliceAt(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #172")
    }

    {
        // arity.yaml line #173
        /* err("ReqlCompileError", "Expected 3 arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 1.")
        /* r.expr([]).change_at() */

    	suite.T().Log("About to run line #173: r.Expr([]interface{}{}).ChangeAt()")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).ChangeAt(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #173")
    }

    {
        // arity.yaml line #175
        /* err("ReqlCompileError", "Expected 3 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* tbl.eq_join(1) */

    	suite.T().Log("About to run line #175: tbl.EqJoin(1)")

        runAndAssert(suite.Suite, expected_, tbl.EqJoin(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #175")
    }

    {
        // arity.yaml line #182
        /* err("ReqlCompileError", "Expected 3 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* tbl.inner_join(1) */

    	suite.T().Log("About to run line #182: tbl.InnerJoin(1)")

        runAndAssert(suite.Suite, expected_, tbl.InnerJoin(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #182")
    }

    {
        // arity.yaml line #183
        /* err("ReqlCompileError", "Expected 3 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* tbl.outer_join(1) */

    	suite.T().Log("About to run line #183: tbl.OuterJoin(1)")

        runAndAssert(suite.Suite, expected_, tbl.OuterJoin(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #183")
    }

    {
        // arity.yaml line #184
        /* err("ReqlCompileError", "Expected 3 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* r.expr([]).insert_at(1) */

    	suite.T().Log("About to run line #184: r.Expr([]interface{}{}).InsertAt(1)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).InsertAt(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #184")
    }

    {
        // arity.yaml line #185
        /* err("ReqlCompileError", "Expected 3 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* r.expr([]).splice_at(1) */

    	suite.T().Log("About to run line #185: r.Expr([]interface{}{}).SpliceAt(1)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).SpliceAt(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #185")
    }

    {
        // arity.yaml line #186
        /* err("ReqlCompileError", "Expected 3 arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* r.expr([]).change_at(1) */

    	suite.T().Log("About to run line #186: r.Expr([]interface{}{}).ChangeAt(1)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).ChangeAt(1), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #186")
    }

    {
        // arity.yaml line #188
        /* err("ReqlCompileError", "Expected 3 arguments but found 5.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 5.")
        /* tbl.eq_join(1,2,3,4) */

    	suite.T().Log("About to run line #188: tbl.EqJoin(1, 2, 3, 4)")

        runAndAssert(suite.Suite, expected_, tbl.EqJoin(1, 2, 3, 4), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #188")
    }

    {
        // arity.yaml line #195
        /* err("ReqlCompileError", "Expected 3 arguments but found 4.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 4.")
        /* tbl.inner_join(1,2,3) */

    	suite.T().Log("About to run line #195: tbl.InnerJoin(1, 2, 3)")

        runAndAssert(suite.Suite, expected_, tbl.InnerJoin(1, 2, 3), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #195")
    }

    {
        // arity.yaml line #196
        /* err("ReqlCompileError", "Expected 3 arguments but found 4.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 4.")
        /* tbl.outer_join(1,2,3) */

    	suite.T().Log("About to run line #196: tbl.OuterJoin(1, 2, 3)")

        runAndAssert(suite.Suite, expected_, tbl.OuterJoin(1, 2, 3), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #196")
    }

    {
        // arity.yaml line #197
        /* err("ReqlCompileError", "Expected 3 arguments but found 4.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 4.")
        /* r.expr([]).insert_at(1, 2, 3) */

    	suite.T().Log("About to run line #197: r.Expr([]interface{}{}).InsertAt(1, 2, 3)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).InsertAt(1, 2, 3), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #197")
    }

    {
        // arity.yaml line #198
        /* err("ReqlCompileError", "Expected 3 arguments but found 4.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 4.")
        /* r.expr([]).splice_at(1, 2, 3) */

    	suite.T().Log("About to run line #198: r.Expr([]interface{}{}).SpliceAt(1, 2, 3)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).SpliceAt(1, 2, 3), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #198")
    }

    {
        // arity.yaml line #199
        /* err("ReqlCompileError", "Expected 3 arguments but found 4.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 4.")
        /* r.expr([]).change_at(1, 2, 3) */

    	suite.T().Log("About to run line #199: r.Expr([]interface{}{}).ChangeAt(1, 2, 3)")

        runAndAssert(suite.Suite, expected_, r.Expr([]interface{}{}).ChangeAt(1, 2, 3), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #199")
    }

    {
        // arity.yaml line #201
        /* err('ReqlCompileError', "Expected 2 or more arguments but found 1.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 2 or more arguments but found 1.")
        /* tbl.map() */

    	suite.T().Log("About to run line #201: tbl.Map()")

        runAndAssert(suite.Suite, expected_, tbl.Map(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #201")
    }

    {
        // arity.yaml line #206
        /* err("ReqlCompileError", "Expected 3 or more arguments but found 2.", []) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 or more arguments but found 2.")
        /* r.branch(1,2) */

    	suite.T().Log("About to run line #206: r.Branch(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Branch(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #206")
    }

    {
        // arity.yaml line #208
        /* err("ReqlQueryLogicError", "Cannot call `branch` term with an even number of arguments.", []) */
        var expected_ Err = err("ReqlQueryLogicError", "Cannot call `branch` term with an even number of arguments.")
        /* r.branch(1,2,3,4) */

    	suite.T().Log("About to run line #208: r.Branch(1, 2, 3, 4)")

        runAndAssert(suite.Suite, expected_, r.Branch(1, 2, 3, 4), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #208")
    }

    {
        // arity.yaml line #211
        /* err('ReqlQueryLogicError', 'Expected NUMBER or STRING as second argument to `bracket` but found ARRAY.') */
        var expected_ Err = err("ReqlQueryLogicError", "Expected NUMBER or STRING as second argument to `bracket` but found ARRAY.")
        /* r.expr({})[1,2] */

    	suite.T().Log("About to run line #211: r.Expr(map[interface{}]interface{}{}).AtIndex([]interface{}{1, 2})")

        runAndAssert(suite.Suite, expected_, r.Expr(map[interface{}]interface{}{}).AtIndex([]interface{}{1, 2}), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #211")
    }

    {
        // arity.yaml line #218
        /* 10 */
        var expected_ int = 10
        /* tbl.insert([{'id':0},{'id':1},{'id':2},{'id':3},{'id':4},{'id':5},{'id':6},{'id':7},{'id':8},{'id':9}]).get_field('inserted') */

    	suite.T().Log("About to run line #218: tbl.Insert([]interface{}{map[interface{}]interface{}{'id': 0, }, map[interface{}]interface{}{'id': 1, }, map[interface{}]interface{}{'id': 2, }, map[interface{}]interface{}{'id': 3, }, map[interface{}]interface{}{'id': 4, }, map[interface{}]interface{}{'id': 5, }, map[interface{}]interface{}{'id': 6, }, map[interface{}]interface{}{'id': 7, }, map[interface{}]interface{}{'id': 8, }, map[interface{}]interface{}{'id': 9, }}).Field('inserted')")

        runAndAssert(suite.Suite, expected_, tbl.Insert([]interface{}{map[interface{}]interface{}{"id": 0, }, map[interface{}]interface{}{"id": 1, }, map[interface{}]interface{}{"id": 2, }, map[interface{}]interface{}{"id": 3, }, map[interface{}]interface{}{"id": 4, }, map[interface{}]interface{}{"id": 5, }, map[interface{}]interface{}{"id": 6, }, map[interface{}]interface{}{"id": 7, }, map[interface{}]interface{}{"id": 8, }, map[interface{}]interface{}{"id": 9, }}).Field("inserted"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #218")
    }

    {
        // arity.yaml line #221
        /* bag([0, 1, 2]) */
        var expected_ Expected = bag([]interface{}{0, 1, 2})
        /* tbl.get_all(0, 1, 2).get_field('id') */

    	suite.T().Log("About to run line #221: tbl.GetAll(0, 1, 2).Field('id')")

        runAndAssert(suite.Suite, expected_, tbl.GetAll(0, 1, 2).Field("id"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #221")
    }

    {
        // arity.yaml line #224
        /* bag([0, 1, 2]) */
        var expected_ Expected = bag([]interface{}{0, 1, 2})
        /* tbl.get_all(r.args([]), 0, 1, 2).get_field('id') */

    	suite.T().Log("About to run line #224: tbl.GetAll(r.Args([]interface{}{}), 0, 1, 2).Field('id')")

        runAndAssert(suite.Suite, expected_, tbl.GetAll(r.Args([]interface{}{}), 0, 1, 2).Field("id"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #224")
    }

    {
        // arity.yaml line #227
        /* bag([0, 1, 2]) */
        var expected_ Expected = bag([]interface{}{0, 1, 2})
        /* tbl.get_all(r.args([0]), 1, 2).get_field('id') */

    	suite.T().Log("About to run line #227: tbl.GetAll(r.Args([]interface{}{0}), 1, 2).Field('id')")

        runAndAssert(suite.Suite, expected_, tbl.GetAll(r.Args([]interface{}{0}), 1, 2).Field("id"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #227")
    }

    {
        // arity.yaml line #230
        /* bag([0, 1, 2]) */
        var expected_ Expected = bag([]interface{}{0, 1, 2})
        /* tbl.get_all(r.args([0, 1]), 2).get_field('id') */

    	suite.T().Log("About to run line #230: tbl.GetAll(r.Args([]interface{}{0, 1}), 2).Field('id')")

        runAndAssert(suite.Suite, expected_, tbl.GetAll(r.Args([]interface{}{0, 1}), 2).Field("id"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #230")
    }

    {
        // arity.yaml line #233
        /* bag([0, 1, 2]) */
        var expected_ Expected = bag([]interface{}{0, 1, 2})
        /* tbl.get_all(r.args([0, 1, 2])).get_field('id') */

    	suite.T().Log("About to run line #233: tbl.GetAll(r.Args([]interface{}{0, 1, 2})).Field('id')")

        runAndAssert(suite.Suite, expected_, tbl.GetAll(r.Args([]interface{}{0, 1, 2})).Field("id"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #233")
    }

    {
        // arity.yaml line #236
        /* bag([0, 1, 2]) */
        var expected_ Expected = bag([]interface{}{0, 1, 2})
        /* tbl.get_all(r.args([0]), 1, r.args([2])).get_field('id') */

    	suite.T().Log("About to run line #236: tbl.GetAll(r.Args([]interface{}{0}), 1, r.Args([]interface{}{2})).Field('id')")

        runAndAssert(suite.Suite, expected_, tbl.GetAll(r.Args([]interface{}{0}), 1, r.Args([]interface{}{2})).Field("id"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #236")
    }

    {
        // arity.yaml line #241
        /* 1 */
        var expected_ int = 1
        /* r.branch(true, 1, r.error("a")) */

    	suite.T().Log("About to run line #241: r.Branch(true, 1, r.Error('a'))")

        runAndAssert(suite.Suite, expected_, r.Branch(true, 1, r.Error("a")), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #241")
    }

    {
        // arity.yaml line #244
        /* 1 */
        var expected_ int = 1
        /* r.branch(r.args([true, 1]), r.error("a")) */

    	suite.T().Log("About to run line #244: r.Branch(r.Args([]interface{}{true, 1}), r.Error('a'))")

        runAndAssert(suite.Suite, expected_, r.Branch(r.Args([]interface{}{true, 1}), r.Error("a")), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #244")
    }

    {
        // arity.yaml line #247
        /* 1 */
        var expected_ int = 1
        /* r.expr(true).branch(1, 2) */

    	suite.T().Log("About to run line #247: r.Expr(true).Branch(1, 2)")

        runAndAssert(suite.Suite, expected_, r.Expr(true).Branch(1, 2), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #247")
    }

    {
        // arity.yaml line #250
        /* err("ReqlUserError", "a", []) */
        var expected_ Err = err("ReqlUserError", "a")
        /* r.branch(r.args([true, 1, r.error("a")])) */

    	suite.T().Log("About to run line #250: r.Branch(r.Args([]interface{}{true, 1, r.Error('a')}))")

        runAndAssert(suite.Suite, expected_, r.Branch(r.Args([]interface{}{true, 1, r.Error("a")})), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #250")
    }

    {
        // arity.yaml line #256
        /* ([{'group':0, 'reduction':1}]) */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"group": 0, "reduction": 1, }}
        /* tbl.group(lambda row:row['id'].mod(2)).count({'id':0}).ungroup() */

    	suite.T().Log("About to run line #256: tbl.Group(func(row r.Term) interface{} { return row.AtIndex('id').Mod(2)}).Count(map[interface{}]interface{}{'id': 0, }).Ungroup()")

        runAndAssert(suite.Suite, expected_, tbl.Group(func(row r.Term) interface{} { return row.AtIndex("id").Mod(2)}).Count(map[interface{}]interface{}{"id": 0, }).Ungroup(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #256")
    }

    {
        // arity.yaml line #261
        /* ([{'group':0, 'reduction':1}]) */
        var expected_ []interface{} = []interface{}{map[interface{}]interface{}{"group": 0, "reduction": 1, }}
        /* tbl.group(r.row['id'].mod(2)).count(r.args([{'id':0}])).ungroup() */

    	suite.T().Log("About to run line #261: tbl.Group(r.Row.AtIndex('id').Mod(2)).Count(r.Args([]interface{}{map[interface{}]interface{}{'id': 0, }})).Ungroup()")

        runAndAssert(suite.Suite, expected_, tbl.Group(r.Row.AtIndex("id").Mod(2)).Count(r.Args([]interface{}{map[interface{}]interface{}{"id": 0, }})).Ungroup(), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #261")
    }

    {
        // arity.yaml line #267
        /* ({'a':{'c':1}}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"a": map[interface{}]interface{}{"c": 1, }, }
        /* r.expr({'a':{'b':1}}).merge(r.args([{'a':r.literal({'c':1})}])) */

    	suite.T().Log("About to run line #267: r.Expr(map[interface{}]interface{}{'a': map[interface{}]interface{}{'b': 1, }, }).Merge(r.Args([]interface{}{map[interface{}]interface{}{'a': r.Literal(map[interface{}]interface{}{'c': 1, }), }}))")

        runAndAssert(suite.Suite, expected_, r.Expr(map[interface{}]interface{}{"a": map[interface{}]interface{}{"b": 1, }, }).Merge(r.Args([]interface{}{map[interface{}]interface{}{"a": r.Literal(map[interface{}]interface{}{"c": 1, }), }})), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #267")
    }

    {
        // arity.yaml line #270
        /* err_regex('TypeError', ".*takes exactly 1 argument \(2 given\)", []) */
        var expected_ ErrRegex = err_regex("TypeError", ".*takes exactly 1 argument \\(2 given\\)")
        /* r.http("httpbin.org/get","bad_param") */

    	suite.T().Log("About to run line #270: r.HTTP('httpbin.org/get', 'bad_param')")

        actual := r.HTTP("httpbin.org/get", "bad_param")

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #270")
    }

    {
        // arity.yaml line #280
        /* err_regex('TypeError', ".*takes exactly 1 argument \(2 given\)", []) */
        var expected_ ErrRegex = err_regex("TypeError", ".*takes exactly 1 argument \\(2 given\\)")
        /* r.binary("1", "2") */

    	suite.T().Log("About to run line #280: r.Binary('1', '2')")

        actual := r.Binary("1", "2")

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #280")
    }

    {
        // arity.yaml line #289
        /* err_regex('TypeError', ".*takes exactly 1 argument \(0 given\)", []) */
        var expected_ ErrRegex = err_regex("TypeError", ".*takes exactly 1 argument \\(0 given\\)")
        /* r.binary() */

    	suite.T().Log("About to run line #289: r.Binary()")

        actual := r.Binary()

    	assertCompare(suite.T(), expected_, actual)
        suite.T().Log("Finished running line #289")
    }

    {
        // arity.yaml line #303
        /* err('ReqlCompileError','Expected 3 arguments but found 2.',[]) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 2.")
        /* tbl.index_rename('idx') */

    	suite.T().Log("About to run line #303: tbl.IndexRename('idx')")

        runAndAssert(suite.Suite, expected_, tbl.IndexRename("idx"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #303")
    }

    {
        // arity.yaml line #308
        /* err('ReqlCompileError','Expected 3 arguments but found 4.',[]) */
        var expected_ Err = err("ReqlCompileError", "Expected 3 arguments but found 4.")
        /* tbl.index_rename('idx','idx2','idx3') */

    	suite.T().Log("About to run line #308: tbl.IndexRename('idx', 'idx2', 'idx3')")

        runAndAssert(suite.Suite, expected_, tbl.IndexRename("idx", "idx2", "idx3"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #308")
    }

    {
        // arity.yaml line #314
        /* err('ReqlCompileError','NOW does not accept any args.') */
        var expected_ Err = err("ReqlCompileError", "NOW does not accept any args.")
        /* r.now('foo') */

    	suite.T().Log("About to run line #314: r.Now('foo')")

        runAndAssert(suite.Suite, expected_, r.Now("foo"), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #314")
    }

    {
        // arity.yaml line #315
        /* err('ReqlCompileError','NOW does not accept any args.') */
        var expected_ Err = err("ReqlCompileError", "NOW does not accept any args.")
        /* r.now(r.args([1,2,3])) */

    	suite.T().Log("About to run line #315: r.Now(r.Args([]interface{}{1, 2, 3}))")

        runAndAssert(suite.Suite, expected_, r.Now(r.Args([]interface{}{1, 2, 3})), suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})
        suite.T().Log("Finished running line #315")
    }
}
