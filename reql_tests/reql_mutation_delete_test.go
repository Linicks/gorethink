// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestMutationDeleteSuite(t *testing.T) {
    suite.Run(t, new(MutationDeleteSuite ))
}

type MutationDeleteSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *MutationDeleteSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

	r.DB("test").TableDrop("tbl").Exec(suite.session)
	err = r.DB("test").TableCreate("tbl").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Table("tbl").Wait().Exec(suite.session)
	suite.Require().NoError(err)
}

func (suite *MutationDeleteSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
	 r.DB("test").TableDrop("tbl").Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *MutationDeleteSuite) TestCases() {
	tbl := r.DB("test").Table("tbl")


    {
        // mutation/delete.yaml line #7
        /* ({'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':100}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"deleted": 0, "replaced": 0, "unchanged": 0, "errors": 0, "skipped": 0, "inserted": 100, }
        /* tbl.insert([{'id':i} for i in xrange(100)]) */

    	suite.T().Log("About to run line #7: tbl.Insert((func() []interface{} {\n    res := []interface{}{}\n    for i := 0; i < 100; i++ {\n        res = append(res, map[interface{}]interface{}{\n            'id': i,\n        })\n    }\n    return res\n}()))")

        cursor, err := tbl.Insert((func() []interface{} {
    res := []interface{}{}
    for i := 0; i < 100; i++ {
        res = append(res, map[interface{}]interface{}{
            "id": i,
        })
    }
    return res
}())).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #7")
    }

    {
        // mutation/delete.yaml line #19
        /* 100 */
        var expected_ int = 100
        /* tbl.count() */

    	suite.T().Log("About to run line #19: tbl.Count()")

        cursor, err := tbl.Count().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #19")
    }

    {
        // mutation/delete.yaml line #24
        /* ({'deleted':1,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':0}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"deleted": 1, "replaced": 0, "unchanged": 0, "errors": 0, "skipped": 0, "inserted": 0, }
        /* tbl.get(12).delete() */

    	suite.T().Log("About to run line #24: tbl.Get(12).Delete()")

        cursor, err := tbl.Get(12).Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #24")
    }

    {
        // mutation/delete.yaml line #31
        /* err('ReqlQueryLogicError', 'Durability option `wrong` unrecognized (options are "hard" and "soft").', [0]) */
        var expected_ Err = err("ReqlQueryLogicError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").")
        /* tbl.skip(50).delete(durability='wrong') */

    	suite.T().Log("About to run line #31: tbl.Skip(50).Delete()")

        cursor, err := tbl.Skip(50).Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #31")
    }

    {
        // mutation/delete.yaml line #38
        /* ({'deleted':49,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':0}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"deleted": 49, "replaced": 0, "unchanged": 0, "errors": 0, "skipped": 0, "inserted": 0, }
        /* tbl.skip(50).delete(durability='soft') */

    	suite.T().Log("About to run line #38: tbl.Skip(50).Delete()")

        cursor, err := tbl.Skip(50).Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #38")
    }

    {
        // mutation/delete.yaml line #45
        /* ({'deleted':50,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':0}) */
        var expected_ map[interface{}]interface{} = map[interface{}]interface{}{"deleted": 50, "replaced": 0, "unchanged": 0, "errors": 0, "skipped": 0, "inserted": 0, }
        /* tbl.delete(durability='hard') */

    	suite.T().Log("About to run line #45: tbl.Delete()")

        cursor, err := tbl.Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #45")
    }

    {
        // mutation/delete.yaml line #49
        /* err('ReqlQueryLogicError', 'Expected type SELECTION but found DATUM:', [0]) */
        var expected_ Err = err("ReqlQueryLogicError", "Expected type SELECTION but found DATUM:")
        /* r.expr([1, 2]).delete() */

    	suite.T().Log("About to run line #49: r.Expr([]interface{}{1, 2}).Delete()")

        cursor, err := r.Expr([]interface{}{1, 2}).Delete().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #49")
    }
}
