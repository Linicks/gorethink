// Autogenerated by gen_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../gen_tests/template.go
package reql_tests

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	r "gopkg.in/dancannon/gorethink.v2"
)

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestTimesTimezonesSuite(t *testing.T) {
    suite.Run(t, new(TimesTimezonesSuite ))
}

type TimesTimezonesSuite struct {
	suite.Suite

	session *r.Session
}

func (suite *TimesTimezonesSuite) SetupTest() {
	// Use imports to prevent errors
	time.Now()

	session, err := r.Connect(r.ConnectOpts{
		Address: url,
	})
	suite.Require().NoError(err, "Error returned when connecting to server")
	suite.session = session

    r.DBDrop("test").Exec(suite.session)
	err = r.DBCreate("test").Exec(suite.session)
	suite.Require().NoError(err)
	err = r.DB("test").Wait().Exec(suite.session)
	suite.Require().NoError(err)

}

func (suite *TimesTimezonesSuite) TearDownSuite() {
	r.DB("rethinkdb").Table("_debug_scratch").Delete().Exec(suite.session)
    r.DBDrop("test").Exec(suite.session)

    suite.session.Close()
}

func (suite *TimesTimezonesSuite) TestCases() {


    // times/timezones.yaml line #3
    // t1 = r.time(2013, r.july, 29, 23, 30, 0, "+00:00")
    suite.T().Log("Possibly executing: var t1 r.Term = r.Time(2013, r.July, 29, 23, 30, 0, '+00:00')")

    var t1 r.Term = r.Time(2013, r.July, 29, 23, 30, 0, "+00:00")
	

    // times/timezones.yaml line #5
    // tutc1 = t1.in_timezone("Z")
    suite.T().Log("Possibly executing: var tutc1 r.Term = t1.InTimezone('Z')")

    var tutc1 r.Term = t1.InTimezone("Z")
	

    // times/timezones.yaml line #6
    // tutc2 = t1.in_timezone("+00:00")
    suite.T().Log("Possibly executing: var tutc2 r.Term = t1.InTimezone('+00:00')")

    var tutc2 r.Term = t1.InTimezone("+00:00")
	

    // times/timezones.yaml line #7
    // tutc3 = t1.in_timezone("+00")
    suite.T().Log("Possibly executing: var tutc3 r.Term = t1.InTimezone('+00')")

    var tutc3 r.Term = t1.InTimezone("+00")
	

    // times/timezones.yaml line #8
    // tutcs = r.expr([tutc1, tutc2, tutc3])
    suite.T().Log("Possibly executing: var tutcs r.Term = r.Expr([]interface{}{tutc1, tutc2, tutc3})")

    var tutcs r.Term = r.Expr([]interface{}{tutc1, tutc2, tutc3})
	

    // times/timezones.yaml line #10
    // tm1 = t1.in_timezone("-00:59")
    suite.T().Log("Possibly executing: var tm1 r.Term = t1.InTimezone('-00:59')")

    var tm1 r.Term = t1.InTimezone("-00:59")
	

    // times/timezones.yaml line #11
    // tm2 = t1.in_timezone("-01:00")
    suite.T().Log("Possibly executing: var tm2 r.Term = t1.InTimezone('-01:00')")

    var tm2 r.Term = t1.InTimezone("-01:00")
	

    // times/timezones.yaml line #12
    // tm3 = t1.in_timezone("-01:01")
    suite.T().Log("Possibly executing: var tm3 r.Term = t1.InTimezone('-01:01')")

    var tm3 r.Term = t1.InTimezone("-01:01")
	

    // times/timezones.yaml line #13
    // tms = r.expr([tm1, tm2, tm3])
    suite.T().Log("Possibly executing: var tms r.Term = r.Expr([]interface{}{tm1, tm2, tm3})")

    var tms r.Term = r.Expr([]interface{}{tm1, tm2, tm3})
	

    // times/timezones.yaml line #15
    // tp1 = t1.in_timezone("+00:59")
    suite.T().Log("Possibly executing: var tp1 r.Term = t1.InTimezone('+00:59')")

    var tp1 r.Term = t1.InTimezone("+00:59")
	

    // times/timezones.yaml line #16
    // tp2 = t1.in_timezone("+01:00")
    suite.T().Log("Possibly executing: var tp2 r.Term = t1.InTimezone('+01:00')")

    var tp2 r.Term = t1.InTimezone("+01:00")
	

    // times/timezones.yaml line #17
    // tp3 = t1.in_timezone("+01:01")
    suite.T().Log("Possibly executing: var tp3 r.Term = t1.InTimezone('+01:01')")

    var tp3 r.Term = t1.InTimezone("+01:01")
	

    // times/timezones.yaml line #18
    // tps = r.expr([tp1, tp2, tp3])
    suite.T().Log("Possibly executing: var tps r.Term = r.Expr([]interface{}{tp1, tp2, tp3})")

    var tps r.Term = r.Expr([]interface{}{tp1, tp2, tp3})
	

    // times/timezones.yaml line #20
    // ts = tutcs.union(tms).union(tps).union([t1])
    suite.T().Log("Possibly executing: var ts r.Term = tutcs.Union(tms).Union(tps).Union([]interface{}{t1})")

    var ts r.Term = tutcs.Union(tms).Union(tps).Union([]interface{}{t1})
	

    {
        // times/timezones.yaml line #23
        /* ([["+00:00", 29], ["+00:00", 29], ["+00:00", 29]]) */
        var expected_ []interface{} = []interface{}{[]interface{}{"+00:00", 29}, []interface{}{"+00:00", 29}, []interface{}{"+00:00", 29}}
        /* tutcs.map(lambda x:[x.timezone(), x.day()]) */

    	suite.T().Log("About to run line #23: tutcs.Map(func(x r.Term) interface{} { return []interface{}{x.Timezone(), x.Day()}})")

        cursor, err := tutcs.Map(func(x r.Term) interface{} { return []interface{}{x.Timezone(), x.Day()}}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #23")
    }

    {
        // times/timezones.yaml line #27
        /* ([["-00:59", 29], ["-01:00", 29], ["-01:01", 29]]) */
        var expected_ []interface{} = []interface{}{[]interface{}{"-00:59", 29}, []interface{}{"-01:00", 29}, []interface{}{"-01:01", 29}}
        /* tms.map(lambda x:[x.timezone(), x.day()]) */

    	suite.T().Log("About to run line #27: tms.Map(func(x r.Term) interface{} { return []interface{}{x.Timezone(), x.Day()}})")

        cursor, err := tms.Map(func(x r.Term) interface{} { return []interface{}{x.Timezone(), x.Day()}}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #27")
    }

    {
        // times/timezones.yaml line #31
        /* ([["+00:59", 30], ["+01:00", 30], ["+01:01", 30]]) */
        var expected_ []interface{} = []interface{}{[]interface{}{"+00:59", 30}, []interface{}{"+01:00", 30}, []interface{}{"+01:01", 30}}
        /* tps.map(lambda x:[x.timezone(), x.day()]) */

    	suite.T().Log("About to run line #31: tps.Map(func(x r.Term) interface{} { return []interface{}{x.Timezone(), x.Day()}})")

        cursor, err := tps.Map(func(x r.Term) interface{} { return []interface{}{x.Timezone(), x.Day()}}).Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #31")
    }

    {
        // times/timezones.yaml line #38
        /* ([0]) */
        var expected_ []interface{} = []interface{}{0}
        /* ts.concat_map(lambda x:ts.map(lambda y:x - y)).distinct() */

    	suite.T().Log("About to run line #38: ts.ConcatMap(func(x r.Term) interface{} { return ts.Map(func(y r.Term) interface{} { return r.Sub(x, y)})}).Distinct()")

        cursor, err := ts.ConcatMap(func(x r.Term) interface{} { return ts.Map(func(y r.Term) interface{} { return r.Sub(x, y)})}).Distinct().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #38")
    }

    {
        // times/timezones.yaml line #44
        /* err('ReqlQueryLogicError', 'Timezone `` does not start with `-` or `+`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.")
        /* r.now().in_timezone("") */

    	suite.T().Log("About to run line #44: r.Now().InTimezone('')")

        cursor, err := r.Now().InTimezone("").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #44")
    }

    {
        // times/timezones.yaml line #47
        /* err('ReqlQueryLogicError', '`-00` is not a valid time offset.') */
        var expected_ Err = err("ReqlQueryLogicError", "`-00` is not a valid time offset.")
        /* r.now().in_timezone("-00") */

    	suite.T().Log("About to run line #47: r.Now().InTimezone('-00')")

        cursor, err := r.Now().InTimezone("-00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #47")
    }

    {
        // times/timezones.yaml line #50
        /* err('ReqlQueryLogicError', '`-00:00` is not a valid time offset.') */
        var expected_ Err = err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.")
        /* r.now().in_timezone("-00:00") */

    	suite.T().Log("About to run line #50: r.Now().InTimezone('-00:00')")

        cursor, err := r.Now().InTimezone("-00:00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #50")
    }

    {
        // times/timezones.yaml line #53
        /* err('ReqlQueryLogicError', 'Timezone `UTC+00` does not start with `-` or `+`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.")
        /* r.now().in_timezone("UTC+00") */

    	suite.T().Log("About to run line #53: r.Now().InTimezone('UTC+00')")

        cursor, err := r.Now().InTimezone("UTC+00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #53")
    }

    {
        // times/timezones.yaml line #56
        /* err('ReqlQueryLogicError', 'Minutes out of range in `+00:60`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.")
        /* r.now().in_timezone("+00:60") */

    	suite.T().Log("About to run line #56: r.Now().InTimezone('+00:60')")

        cursor, err := r.Now().InTimezone("+00:60").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #56")
    }

    {
        // times/timezones.yaml line #59
        /* err('ReqlQueryLogicError', 'Hours out of range in `+25:00`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Hours out of range in `+25:00`.")
        /* r.now().in_timezone("+25:00") */

    	suite.T().Log("About to run line #59: r.Now().InTimezone('+25:00')")

        cursor, err := r.Now().InTimezone("+25:00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #59")
    }

    {
        // times/timezones.yaml line #63
        /* err('ReqlQueryLogicError', 'Timezone `` does not start with `-` or `+`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.")
        /* r.time(2013, 1, 1, "") */

    	suite.T().Log("About to run line #63: r.Time(2013, 1, 1, '')")

        cursor, err := r.Time(2013, 1, 1, "").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #63")
    }

    {
        // times/timezones.yaml line #66
        /* err('ReqlQueryLogicError', '`-00` is not a valid time offset.') */
        var expected_ Err = err("ReqlQueryLogicError", "`-00` is not a valid time offset.")
        /* r.time(2013, 1, 1, "-00") */

    	suite.T().Log("About to run line #66: r.Time(2013, 1, 1, '-00')")

        cursor, err := r.Time(2013, 1, 1, "-00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #66")
    }

    {
        // times/timezones.yaml line #69
        /* err('ReqlQueryLogicError', '`-00:00` is not a valid time offset.') */
        var expected_ Err = err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.")
        /* r.time(2013, 1, 1, "-00:00") */

    	suite.T().Log("About to run line #69: r.Time(2013, 1, 1, '-00:00')")

        cursor, err := r.Time(2013, 1, 1, "-00:00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #69")
    }

    {
        // times/timezones.yaml line #72
        /* err('ReqlQueryLogicError', 'Timezone `UTC+00` does not start with `-` or `+`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.")
        /* r.time(2013, 1, 1, "UTC+00") */

    	suite.T().Log("About to run line #72: r.Time(2013, 1, 1, 'UTC+00')")

        cursor, err := r.Time(2013, 1, 1, "UTC+00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #72")
    }

    {
        // times/timezones.yaml line #75
        /* err('ReqlQueryLogicError', 'Minutes out of range in `+00:60`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.")
        /* r.time(2013, 1, 1, "+00:60") */

    	suite.T().Log("About to run line #75: r.Time(2013, 1, 1, '+00:60')")

        cursor, err := r.Time(2013, 1, 1, "+00:60").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #75")
    }

    {
        // times/timezones.yaml line #78
        /* err('ReqlQueryLogicError', 'Hours out of range in `+25:00`.') */
        var expected_ Err = err("ReqlQueryLogicError", "Hours out of range in `+25:00`.")
        /* r.time(2013, 1, 1, "+25:00") */

    	suite.T().Log("About to run line #78: r.Time(2013, 1, 1, '+25:00')")

        cursor, err := r.Time(2013, 1, 1, "+25:00").Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #78")
    }

    {
        // times/timezones.yaml line #81
        /* ("2015-07-08T00:00:00-08:00") */
        var expected_ string = "2015-07-08T00:00:00-08:00"
        /* r.epoch_time(1436428422.339).in_timezone('-08:00').date().to_iso8601() */

    	suite.T().Log("About to run line #81: r.EpochTime(1436428422.339).InTimezone('-08:00').Date().ToISO8601()")

        cursor, err := r.EpochTime(1436428422.339).InTimezone("-08:00").Date().ToISO8601().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #81")
    }

    {
        // times/timezones.yaml line #85
        /* ("2015-07-09T00:00:00-07:00") */
        var expected_ string = "2015-07-09T00:00:00-07:00"
        /* r.epoch_time(1436428422.339).in_timezone('-07:00').date().to_iso8601() */

    	suite.T().Log("About to run line #85: r.EpochTime(1436428422.339).InTimezone('-07:00').Date().ToISO8601()")

        cursor, err := r.EpochTime(1436428422.339).InTimezone("-07:00").Date().ToISO8601().Run(suite.session, r.RunOpts{
			GeometryFormat: "raw",
    	})

    	assertExpected(suite.Suite, expected_, cursor, err)
        suite.T().Log("Finished running line #85")
    }
}
